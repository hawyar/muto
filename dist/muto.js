var u=(n,t,e)=>new Promise((r,i)=>{var s=o=>{try{d(e.next(o))}catch(h){i(h)}},c=o=>{try{d(e.throw(o))}catch(h){i(h)}},d=o=>o.done?r(o.value):Promise.resolve(o.value).then(s,c);d((e=e.apply(n,t)).next())});import*as a from"fs";import{readFileSync as g,writeFileSync as S}from"atomically";import{CreateMultipartUploadCommand as $,PutObjectCommand as O,S3Client as D}from"@aws-sdk/client-s3";import{fromIni as k}from"@aws-sdk/credential-providers";import{spawn as N}from"child_process";import W from"os";import C from"path";import{createInterface as z}from"readline";import{join as P}from"path";var m=P(process.cwd(),"node_modules",".bin","mlr@v6.0.0");var x=n=>k({profile:n,mfaCodeProvider:t=>u(void 0,null,function*(){return t})}),y;function v(n){return y||(console.log("creating s3 client"),y=new D(n)),y}function j(n,t){let e={file:t&&t.file?t.file:!1};if(!n.startsWith("s3://")||n.split(":/")[0]!=="s3")throw new Error(`invalid-s3-uri: ${n}`);let r="",i={bucket:"",key:"",file:""},s=n.split(":/")[1],[c,...d]=s.split("/").splice(1);return i.bucket=c,i.key=d.join("/"),d.forEach((o,h)=>{if(h===d.length-1){let f=o.split(".").length;if(e.file&&f===1&&(r=`uri should be a given, given: ${n}`),!e.file&&f===1)return;if(!e.file&&f>1){r=`Invalid S3 uri, ${n} should not end with a file name`;return}!e.file&&o.split(".")[1]!==""&&f>1&&(r=`${n} should not be a file endpoint: ${o}`),f>1&&o.split(".")[1]!==""&&(i.file=o)}}),{data:i,err:r}}var E=class{constructor(t,e){this.source=t,this.cached=!1,this.destination=e.destination,this.options=e,this.env=this.determineSource(),this.shape={type:"",columns:[],header:!1,encoding:"",bom:!1,size:0,spanMultipleLines:!1,quotes:!1,delimiter:"",errors:{},warnings:{},preview:[[]]},this.addedAt=new Date,this.state="init",this.connector=null}toJson(){return u(this,null,function*(){let t=a.createWriteStream(this.destination);return this.exec(m,["--icsv","--ojson","clean-whitespace","cat",this.source]).stdout.pipe(t),t.on("close",()=>(console.log("\u{1F4DD} Dataset converted to JSON"),this.destination)),t.on("error",r=>{throw new Error(r.message)}),this.destination})}rowCount(){return u(this,null,function*(){let t=yield this.exec(m,["--ojson","count",this.source]),e=yield this.promisifyProcessResult(t);if(e.code!==0)throw new Error(`Error while counting rows: ${e.stderr}`);if(e.stderr)throw new Error(e.stderr);let r=JSON.parse(e.stdout);if(r.length===0)throw new Error("No rows found");return r[0].count})}columns(){return u(this,null,function*(){let t=yield this.exec(m,["--icsv","--ojson","head","-n","1",this.source]),e=yield this.promisifyProcessResult(t);if(e.code!==0)return null;if(e.stderr)throw new Error(e.stderr);let r=JSON.parse(e.stdout);return r.length===0?(this.shape.header=!1,null):(this.shape.columns=Object.keys(r[0]),this.shape.header=!0,this.shape.columns)})}preview(t=20,e){return u(this,null,function*(){let r,i=1024*1024*10,c=yield a.promises.stat(this.source);if(e&&e!==this.source&&a.createWriteStream(e)instanceof a.WriteStream||c.size>i){if(e===void 0)throw new Error("stream-destination-undefined");return r=a.createWriteStream(e),(yield this.exec(m,["--icsv","--ojson","head","-n",t.toString(),this.source])).stdout.pipe(r),console.warn(`\u{1F440} Preview saved to: ${e}`),e}let d=yield this.exec(m,["--icsv","--ojson","head","-n",t.toString(),this.source]),o=yield this.promisifyProcessResult(d);if(o.stderr)throw new Error(o.stderr);if(o.code!==0)throw new Error("Error while executing mlr command");return this.shape.preview=JSON.parse(o.stdout),this.shape.preview})}uploadToS3(){return u(this,null,function*(){let t=a.createReadStream(this.source);if(!t.readable)throw new Error("failed-to-read-source: Make sure the provided file is readable");let{data:e,err:r}=j(this.destination,{file:!0});if(r.toString().startsWith("invalid-s3-uri"))throw new Error(`failed-to-parse-s3-uri: ${r}`);e.file||(e.file=C.basename(this.source)),console.log(`uploading ${this.source} to ${this.destination}`);let s=yield v({region:"us-east-2"}).send(new O({Bucket:e.bucket,Key:e.key+e.file,Body:t})).catch(c=>{throw new Error(`failed-upload-s3: Error while uploading to S3: ${c}`)}).finally(()=>{t.close()});if(s.$metadata.httpStatusCode!==200)throw new Error(`failed-upload-s3: Error while uploading to S3: ${s.$metadata.httpStatusCode}`);if(!s.ETag)throw new Error(`failed-upload-s3: Error while uploading to S3: ${s.ETag}`);return console.log("uploaded successfully"),s.ETag})}detectShape(){return u(this,null,function*(){let t=this.source,e={type:"",size:0,columns:[""],header:!1,encoding:"utf-8",bom:!1,spanMultipleLines:!1,quotes:!1,delimiter:",",errors:{},warnings:{},preview:[[""]]};if(!a.existsSync(t))throw new Error(`path-doesnt-exists: ${t} ,provide a valid path to a CSV file`);let r=a.statSync(t);if(this.shape.size=r.size,r.size>1024*1024*1024)throw new Error(`file-size-exceeds-limit: ${t} is too large, please limit to under 1GB for now`);if(!a.existsSync(t))throw new Error(`${t} does not exist, provide a valid path to a CSV file`);if(W.platform()==="win32")throw new Error("scream");let i=this.exec("file",[t,"--mime-type"]);i.stdout.on("data",l=>{let p=l.toString().split(":")[1].trim();if(console.log(p),p==="text/csv"||p==="text/plain"){this.shape.type=p;return}throw this.shape.errors.incorrectType=`${t} is not a CSV file`,new Error(`unsupported-file-type: ${t} is not a CSV file`)}),i.stderr.on("error",l=>{console.warn(l)}),i.on("close",l=>{(l!==0||this.shape.type==="")&&console.warn("unable to use file()")});let s=z({input:a.createReadStream(t),crlfDelay:1/0}),c=0,d=20,o={row:[""],del:""},h="",f=[",",";","	","|",":"," ","|"];return s.on("line",l=>{if(c===0){f.forEach(w=>{l.split(w).length>1&&(o.row=l.split(w),o.del=w)}),(o.del===""||o.row.length<=1)&&(e.errors.unrecognizedDelimiter=`${t} does not have a recognized delimiter`,e.header=!1);let p=/\d+/;e.header=!0,e.delimiter=o.del,e.columns=o.row}if(c>0&&c<d){let p=l.split('"').length-1;if(h&&p%2!==0&&(e.spanMultipleLines=!0),p%2!==0&&l.split('""').length-1!==1&&(h=l),l.split(o.del).length!==o.row.length){e.errors.rowWidthMismatch="row width mismatch";return}e.preview.push(l.split(o.del))}c++}),e})}determineConnector(){let t=this.determineSource();if(t==="local")return a.createReadStream(this.source);if(t==="aws")return v({credentials:x("default"),region:"us-east-2"});throw new Error(`unsupported-source for: ${this.source}`)}determineSource(){if(this.source.startsWith("/")||this.source.startsWith("../")||this.source.startsWith("./"))return"local";if(this.source.startsWith("s3://"))return"remote";throw new Error(`invalid-source-type: ${this.source}`)}fileSize(){let t=1024*1024*50;if(!a.existsSync(this.source))throw new Error(`path-doesnt-exists: ${this.source} ,provide a valid path to a CSV file`);let e=a.statSync(this.source);if(e.size>t)throw new Error(`file-size-exceeds-limit: ${this.source} is too large, please limit to 50MB`);return e.size}initMultipartUpload(t,e){return u(this,null,function*(){let r=v({credentials:x("default"),region:"us-east-2"}),i=new $({Bucket:t,ContentEncoding:"utf8",ContentType:"text/csv",Key:e}),s=yield r.send(i);if(s.$metadata.httpStatusCode!==200)throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${s.UploadId} with status code ${s.$metadata.httpStatusCode}`);if(!s.UploadId)throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${s.UploadId}`);return s.UploadId})}exec(t,e){return console.log(`\u{1F4DD} executing: ${t} ${e.join(" ")}`),N(t,e)}promisifyProcessResult(t){let e={stdout:"",stderr:"",code:0};return new Promise((r,i)=>{t.stdout.on("data",s=>{e.stdout+=s}),t.stderr.on("data",s=>{e.stderr+=s}),t.on("close",s=>{e.code=s===0?0:1,r(e)}),t.on("error",s=>{i(s)})})}};function J(n,t){return new E(n,t)}var M=function(){let n;function t(){let e=C.join(process.cwd(),".muto-cache");return a.existsSync(e)?console.log("loading cache from",e):(console.log("creating cache file at",e),S(e,JSON.stringify({}))),{init:new Date,path:e,get:r=>{let i=g(e),s=JSON.parse(i.toString());if(s[r].source===r)return s[r]},set:(r,i)=>{let s=g(e),c=JSON.parse(s.toString());if(!c[r])return c[r]=i,S(e,JSON.stringify(c)),r},has:r=>{let i=g(e);return!!JSON.parse(i.toString())[r]},delete:r=>{let i=g(e),s=JSON.parse(i.toString());delete s[r],S(e,JSON.stringify(s))},clear:()=>{S(e,JSON.stringify({}))},size:()=>{let r=g(e),i=JSON.parse(r.toString());return Object.keys(i).length},keys:()=>{let r=g(e),i=JSON.parse(r.toString());return Object.keys(i)}}}return{getInstance:()=>(n||(n=t()),n)}}(),b=class{constructor(t){this.name=t,this.datasets=new Map,this.createdAt=new Date,this.env="local",this.lcache=M.getInstance()}list(){return Array.from(this.datasets.values())}remove(t){this.datasets.delete(t.source)}add(t,e){return u(this,null,function*(){if(e.destination===""&&console.warn(`destination-not-provided: provide a destination for ${t}`),this.lcache.has(t))return t;let r=new E(t,e);return this.datasets.set(t,r),t})}};function T(n){return new b(n)}export{J as createDataset,T as createWorkflow};
//# sourceMappingURL=muto.js.map
