{
  "version": 3,
  "sources": ["../bin/cli.js", "../lib/engine.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport arg from \"arg\"\nimport { createCatalog } from \"../dist/muto.js\"\n\nconst usage = `\nUsage:\n  $muto [options]\n  \n  commands:\n    upload    uploads the specified file to S3\n\n  options:\n    -v, --version  current version\n\n    -f --from      Path of the file to source from\n    -t --to        Destination path of where to save the output to\n`\n\nconst args = arg({\n    \"--help\": Boolean,\n    \"--version\": Boolean,\n    \"--from\": String,\n    \"--to\": String,\n\n    // aliases\n    \"-h\": \"--help\",\n    \"-v\": \"--version\",\n    \"-f\": \"--from\",\n    \"-t\": \"--to\"\n})\n\nif (args[\"--help\"]) {\n    stdWrite(usage)\n    process.exit(0)\n}\n\nif (args[\"--version\"]) {\n    stdWrite(`v0.1.0`)\n    process.exit(0)\n}\nconst commands = args[\"_\"]\nif (Object.keys(args).length === 1) {\n    stdWrite(usage)\n    process.exit(0)\n}\n\nconst operations = {\n    upload: \"UPLOAD\"\n}\n\nvoid (async function run() {\n    let input = {\n        from: \"\",\n        to: \"\"\n    }\n    if (args[\"--from\"]) {\n        input.from = args[\"--from\"]\n    }\n\n    if (args[\"--to\"]) {\n        input.to = args[\"--to\"]\n    }\n\n    if (commands.indexOf(\"upload\") == -1) {\n        input.operation = operations.upload\n    }\n\n    const dataset = await createCatalog(input.from, {\n        name: \"albums\",\n        destination: \"s3://hwyr-cms/testme/albums.csv\",\n        output: \"json\"\n    })\n\n    //\n    // if (!args[\"--from\"]) {\n    //     stdWrite(\n    //         `Error: no source given for operation, provide a valid source path \\nExample: \\n \\t File system: ./my-datasets  \\n \\t AWS S3: s3://my-bucket/datasets/\n    //         `\n    //     );\n    //     process.exit(1);\n    // }\n    //\n    // if (!args[\"--to\"]) {\n    //     stdWrite(\n    //         `Error: no destination given for operation, provide a valid destination path \\nExample: \\n \\t File system: ./my-datasets  \\n \\t AWS S3: s3://my-bucket/datasets/\n    //         `\n    //     );\n    //     process.exit(1);\n    // }\n    //\n    // config.from = args[\"--from\"];\n    // config.to = args[\"--to\"];\n    //\n    // const w = createWorkflow(\"my_etl\");\n    //\n    // // if fs and not dir throw before initializing engine\n    //\n    // if (\n    //     config.from.startsWith(\"/\") ||\n    //     config.from.startsWith(\"./\") ||\n    //     config.from.startsWith(\"../\")\n    // ) {\n    //     const isDir = await fs\n    //         .stat(config.from)\n    //         .then((stat) => stat.isDirectory())\n    //         .catch((err) => {\n    //             stdWrite(\"Error: given source is not a valid directory\");\n    //             process.exit(1);\n    //         });\n    //\n    //     if (!isDir) {\n    //         stdWrite(\n    //             \"Error: unable to open source, please make sure source is a valid path\"\n    //         );\n    //         process.exit(1);\n    //     }\n    //\n    //     stdWrite(`Created new worklow`);\n    //\n    //     const files = await fs\n    //         .readdir(config.from)\n    //         .then((files) => files)\n    //         .catch((err) => {\n    //             stdWrite(err);\n    //             process.exit(1);\n    //         });\n    //\n    //     for (const file of files) {\n    //         if (!file.endsWith(\".csv\")) return;\n    //         const src = \"./\" + path.normalize(path.join(config.from, file));\n    //\n    //         stdWrite(`Adding ${src} to workflow`);\n    //         const d1 = await w\n    //             .add(src, {\n    //                 delimiter: \",\",\n    //                 quote: '\"',\n    //                 header: true,\n    //             })\n    //             .catch((err) => {\n    //                 console.log(err);\n    //             });\n    //\n    //         console.log(d1);\n    //     }\n    // }\n\n    process.exit(0)\n})()\n\nfunction stdWrite(msg) {\n    typeof msg === \"string\"\n        ? process.stdout.write(`${msg} \\n`)\n        : process.stdout.write(`${JSON.stringify(msg, null, 2)}\\n`)\n}\n\n// catch unhandled promises\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n    stdWrite(reason)\n    process.exit(1)\n})\n", "import fs from \"fs\"\nimport {ChildProcessWithoutNullStreams, spawn} from \"child_process\"\nimport os from \"os\"\nimport path, {join} from \"path\"\nimport {VFile} from \"vfile\"\nimport {createInterface} from \"readline\"\nimport {CreateMultipartUploadCommand, PutObjectCommand, S3Client, S3ClientConfig} from \"@aws-sdk/client-s3\"\nimport {fromIni} from \"@aws-sdk/credential-providers\"\n\nenum Delimiter {\n    COMMA = \",\",\n    TAB = \"\\t\",\n    SPACE = \" \",\n    PIPE = \"|\",\n    SEMICOLON = \";\",\n    COLON = \":\"\n}\n\nconst mlr = join(process.cwd(), \"node_modules\", \".bin\", \"mlr@v6.0.0\")\n\ntype env = \"local\" | \"aws\"\ntype connectorType = S3Client | fs.ReadStream\ntype loaderType = S3Client | fs.ReadStream\n\n// TODO: better error message for warning and errors in transform\ntype catalogStateType =\n    | \"init\"\n    | \"transforming\"\n    | \"uploading\"\n    | \"cancelled\"\n    | \"uploaded\"\n    | \"ready\"\n\ntype ProcessResult = {\n    stdout: string\n    stderr: string\n    code: number\n}\n\ntype Shape = {\n    type: string\n    columns: Array<string>\n    header: boolean\n    encoding: string\n    bom: boolean\n    size: number\n    spanMultipleLines: boolean\n    quotes: boolean\n    delimiter: string\n    errors: { [key: string]: string }\n    warnings: { [key: string]: string }\n    preview: string[][]\n}\n\ntype CatalogOptions = {\n    name: string\n    destination: string\n    columns: Array<string>\n    header: boolean\n    quotes: boolean\n    output: \"csv\" | \"json\"\n    delimiter: Delimiter\n}\n\nconst sqlparser = join(\n    process.cwd(),\n    \"node_modules\",\n    \".bin\",\n    \"sqlparser@v0.1.4\"\n)\n\ntype ParsedStatement = {\n    Cache?: string\n    Comments?: string\n    Distinct?: string\n    Hints?: string\n    SelectExprs?: []\n    From?: []\n    Where?: string\n    GroupBy?: null\n    Having?: null\n    OrderBy?: []\n    Limit?: null\n    Lock?: \"\"\n}\n\nconst credentials = (profile: string) =>\n    fromIni({\n        profile: profile,\n        mfaCodeProvider: async (mfaSerial) => {\n            return mfaSerial\n        }\n    })\n\nlet s3: S3Client\n\nfunction s3Client(config: S3ClientConfig): S3Client {\n    if (!s3) {\n        console.log(\"setting up s3 client\")\n        s3 = new S3Client(config)\n    }\n    return s3\n}\n\nfunction parseS3Uri(\n    uri: string,\n    options: {\n        file: boolean\n    }\n): {\n    data: {\n        bucket: string\n        key: string\n        file: string\n    }\n    err: string\n} {\n    const opt = {\n        file: options && options.file ? options.file : false\n    }\n\n    if (!uri.startsWith(\"s3://\") || uri.split(\":/\")[0] !== \"s3\") {\n        throw new Error(`invalid-s3-uri: ${uri}`)\n    }\n\n    let err = \"\"\n    const result = {\n        bucket: \"\",\n        key: \"\",\n        file: \"\"\n    }\n\n    const src = uri.split(\":/\")[1]\n    const [bucket, ...keys] = src.split(\"/\").splice(1)\n\n    result.bucket = bucket\n    result.key = keys.join(\"/\")\n\n    keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n            const last = k.split(\".\").length\n            if (opt.file && last === 1)\n                err = `uri should be a given, given: ${uri}`\n\n            if (!opt.file && last === 1) return\n\n            if (!opt.file && last > 1) {\n                err = `Invalid S3 uri, ${uri} should not end with a file name`\n                return\n            }\n\n            if (!opt.file && k.split(\".\")[1] !== \"\" && last > 1)\n                err = `${uri} should not be a file endpoint: ${k}`\n\n            if (last > 1 && k.split(\".\")[1] !== \"\") result.file = k\n        }\n    })\n    return {\n        data: result,\n        err: err\n    }\n}\n\nclass Catalog {\n    name: string\n    source: string\n    options: CatalogOptions\n    destination: string\n    init: Date\n    env: env\n    state: catalogStateType\n    vfile: VFile\n    pcount: number\n\n    constructor(source: string, options: CatalogOptions) {\n        this.name =\n            options && options.name ? options.name : path.basename(source)\n        this.source = source\n        this.options = options\n        this.destination = options.destination\n        this.env = \"local\"\n        this.init = new Date()\n        this.state = \"init\"\n        this.pcount = 0\n        this.vfile = new VFile({path: this.source})\n    }\n\n    async toJson(): Promise<ChildProcessWithoutNullStreams> {\n        const json = this.exec(mlr, [\n            \"--icsv\",\n            \"--ojson\",\n            \"clean-whitespace\",\n            this.source\n        ])\n        if (!json.stdout) {\n            throw new Error(`failed to convert ${this.source} from CSV to JSON`)\n        }\n        return json\n    }\n\n    async toCSV(): Promise<ChildProcessWithoutNullStreams> {\n        const json = this.exec(mlr, [\"--icsv\", \"--ocsv\", \"cat\", this.source])\n        if (!json.stdout) {\n            throw new Error(`failed to convert ${this.source} from JSON to CSV`)\n        }\n        return json\n    }\n\n    async rowCount(): Promise<number> {\n        const count = await this.exec(mlr, [`--ojson`, `count`, this.source])\n\n        const rowCountExec = await this.promisifyProcessResult(count)\n\n        if (rowCountExec.code !== 0) {\n            throw new Error(`Error while counting rows: ${rowCountExec.stderr}`)\n        }\n\n        if (rowCountExec.stderr) {\n            throw new Error(rowCountExec.stderr)\n        }\n\n        const r = JSON.parse(rowCountExec.stdout)\n\n        if (r.length === 0) {\n            throw new Error(\"No rows found\")\n        }\n\n        return r[0].count\n    }\n\n    async getColumnHeader(): Promise<string[] | null> {\n        const res = await this.exec(mlr, [\n            `--icsv`,\n            `--ojson`,\n            `head`,\n            `-n`,\n            `1`,\n            this.source\n        ])\n\n        const colExec = await this.promisifyProcessResult(res)\n\n        if (colExec.code !== 0) {\n            return null\n        }\n\n        if (colExec.stderr) {\n            throw new Error(colExec.stderr)\n        }\n        const columns = JSON.parse(colExec.stdout)\n\n        if (columns.length === 0) {\n            return null\n        }\n\n        const first = Object.keys(columns[0])\n        this.vfile.data.columns = first\n        return first\n    }\n\n    async preview(count = 20, streamTo?: string): Promise<string[][] | string> {\n        let write: fs.WriteStream\n\n        const maxPreview = 1024 * 1024 * 10\n\n        const fsp = fs.promises\n        const stat = await fsp.stat(this.source)\n\n        if (\n            (streamTo &&\n                streamTo !== this.source &&\n                fs.createWriteStream(streamTo) instanceof fs.WriteStream) ||\n            stat.size > maxPreview\n        ) {\n            if (streamTo === undefined)\n                throw new Error(\"stream-destination-undefined\")\n            write = fs.createWriteStream(streamTo)\n\n            const previewExec = await this.exec(mlr, [\n                `--icsv`,\n                `--ojson`,\n                `head`,\n                `-n`,\n                count.toString(),\n                this.source\n            ])\n\n            previewExec.stdout.pipe(write)\n\n            console.warn(`\uD83D\uDC40 Preview saved to: ${streamTo}`)\n            return streamTo\n        }\n\n        const previewExec = await this.exec(mlr, [\n            `--icsv`,\n            `--ojson`,\n            `head`,\n            `-n`,\n            count.toString(),\n            this.source\n        ])\n\n        const prev = await this.promisifyProcessResult(previewExec)\n\n        if (prev.stderr) {\n            throw new Error(prev.stderr)\n        }\n\n        if (prev.code !== 0) {\n            throw new Error(`Error while executing mlr command`)\n        }\n\n        this.vfile.data.preview = JSON.parse(prev.stdout)\n        return JSON.parse(prev.stdout)\n    }\n\n    async detectShape(): Promise<void> {\n        const path = this.source\n        const shape: Shape = {\n            type: \"\",\n            size: 0,\n            columns: [],\n            header: false,\n            encoding: \"utf-8\",\n            bom: false,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: \",\",\n            errors: {},\n            warnings: {},\n            preview: []\n        }\n\n        if (!fs.existsSync(path)) {\n            throw new Error(\n                `path-doesnt-exists: ${path} ,provide a valid path to a CSV file`\n            )\n        }\n\n        shape.size = fs.statSync(path).size\n\n        if (shape.size > 1024 * 1024 * 1024) {\n            throw new Error(\n                `file-size-exceeds-limit: ${path} is too large, please limit to under 1GB for now`\n            )\n        }\n\n        if (!fs.existsSync(path)) {\n            throw new Error(\n                `${path} does not exist, provide a valid path to a CSV file`\n            )\n        }\n\n        if (os.platform() === \"win32\") {\n            // todo: handle\n            throw new Error(`scream`)\n        }\n\n        const mime = this.exec(\"file\", [path, \"--mime-type\"])\n\n        const mimeRes = await this.promisifyProcessResult(mime)\n\n        if (mimeRes.stderr) {\n            throw new Error(`failed-to-detect-mime-type: ${mimeRes.stderr}`)\n        }\n\n        if (mimeRes.code !== 0) {\n            throw new Error(`failed-to-detect-mime-type: ${mimeRes.stderr}`)\n        }\n\n        shape.type = mimeRes.stdout.split(\":\")[1].trim()\n\n        const readLine = createInterface({\n            input: fs.createReadStream(path),\n            crlfDelay: Infinity\n        })\n\n        let count = 0\n        const max = 20\n\n        const first = {\n            row: [\"\"],\n            del: \"\"\n        }\n\n        let previous = \"\"\n\n        const delimiters = [\",\", \";\", \"\\t\", \"|\", \":\", \" \", \"|\"]\n\n        readLine.on(\"line\", (current) => {\n            if (count === 0) {\n                delimiters.forEach((d) => {\n                    if (current.split(d).length > 1) {\n                        first.row = current.split(d)\n                        first.del = d\n                    }\n                })\n\n                if (first.del === \"\" || first.row.length <= 1) {\n                    shape.errors[\n                        \"unrecognizedDelimiter\"\n                        ] = `${path} does not have a recognized delimiter`\n                    shape.header = false\n                }\n                const isDigit = /\\d+/\n\n                const hasDigitInHeader = first.row.some((el) => isDigit.test(el));\n\n\n                console.log(hasDigitInHeader)\n                // if (hasDigitInHeader) {\n                //     shape.header = false;\n                //     shape.warnings[\"noHeader\"] = `no header found`;\n                //     count++;\n                //     return;\n                // }\n\n                shape.header = true\n                shape.delimiter = first.del\n                shape.columns = first.row\n            }\n\n            if (count > 0 && count < max) {\n                // there is a chance the record spans next line\n                const inlineQuotes = current.split(`\"`).length - 1\n\n                if (previous) {\n                    if (inlineQuotes % 2 !== 0) {\n                        // TODO: make sure previous + current\n                        // console.log(previous + l);\n                        shape.spanMultipleLines = true\n                    }\n                }\n                // if odd number of quotes and consider escaped quotes such as: \"aaa\",\"b\"\"bb\",\"ccc\"\n                if (\n                    inlineQuotes % 2 !== 0 &&\n                    current.split(`\"\"`).length - 1 !== 1\n                ) {\n                    previous = current\n                }\n\n                const width = current.split(first.del).length\n\n                if (width !== first.row.length) {\n                    shape.errors[\"rowWidthMismatch\"] = `row width mismatch`\n                    return\n                }\n                shape.preview.push(current.split(first.del))\n            }\n            count++\n        })\n\n        readLine.on(\"close\", () => {\n            this.vfile.data.shape = shape\n        })\n    }\n\n    determineLoader(): void {\n        if (this.destination.startsWith(\"s3://\")) {\n            this.vfile.data.loader = s3Client({\n                credentials: credentials(\"default\"),\n                region: \"us-east-2\"\n            })\n            return\n        }\n\n        if (\n            this.source.startsWith(\"/\") ||\n            this.source.startsWith(\"../\") ||\n            this.source.startsWith(\"./\")\n        ) {\n            this.vfile.data.loader = fs.createReadStream(this.source)\n            return\n        }\n    }\n\n    determineConnector(): void {\n        switch (this.env) {\n            case \"local\":\n                if (!fs.existsSync(this.source)) {\n                    throw new Error(\n                        `file: ${this.source} not found, please provide a valid file path`\n                    )\n                }\n                this.vfile.data.connector = fs.createReadStream(this.source)\n                break\n\n            case \"aws\":\n                this.vfile.data.connector = s3Client({\n                    credentials: credentials(\"default\"),\n                    region: \"us-east-2\"\n                })\n                break\n\n            default:\n                throw new Error(`unsupported-source for: ${this.source}`)\n        }\n    }\n\n    determineEnv() {\n        this.vfile.data.source = this.source\n\n        if (\n            this.source.startsWith(\"/\") ||\n            this.source.startsWith(\"../\") ||\n            this.source.startsWith(\"./\")\n        ) {\n            this.env = \"local\"\n            return\n        }\n\n        if (this.source.startsWith(\"s3://\")) {\n            this.env = \"aws\"\n            return\n        }\n\n        throw new Error(`invalid-source-type: ${this.source}`)\n    }\n\n    fileSize(): number {\n        const max = 1024 * 1024 * 50\n\n        if (!fs.existsSync(this.source)) {\n            throw new Error(\n                `path-doesnt-exists: ${this.source} ,provide a valid path to a CSV file`\n            )\n        }\n\n        const stat = fs.statSync(this.source)\n\n        if (stat.size > max) {\n            throw new Error(\n                `file-size-exceeds-limit: ${this.source} is too large, please limit to 50MB`\n            )\n        }\n        return stat.size\n    }\n\n    async uploadToS3(): Promise<string> {\n        if (!this.source || !this.destination) {\n            throw new Error(\n                \"source or destination not set. Both must be defined to upload to S3\"\n            )\n        }\n\n        const fStream = fs.createReadStream(this.source)\n\n        if (!fStream.readable) {\n            throw new Error(\n                \"failed-to-read-source: Make sure the provided file is readable\"\n            )\n        }\n\n        const fSize = this.fileSize()\n\n        if (fSize > 100 * 1024 * 1024) {\n            //TODO: init multipart upload then upload parts\n            console.warn(`file size ${fSize} is larger than 100MB`)\n        }\n\n        const {data: uri, err} = parseS3Uri(this.destination, {\n            file: true\n        })\n\n        if (err.toString().startsWith(`invalid-s3-uri`)) {\n            throw new Error(`failed-to-parse-s3-uri: ${err}`)\n        }\n\n        if (!uri.file) {\n            uri.file = path.basename(this.source)\n            console.warn(\n                \"Destination filename not provided. Using source source basename\" +\n                uri.file\n            )\n        }\n\n        console.log(`uploading ${this.source} to ${this.destination}`)\n\n        const s3 = s3Client({\n            region: \"us-east-2\"\n        })\n\n        const res = await s3\n            .send(\n                new PutObjectCommand({\n                    Bucket: uri.bucket,\n                    Key: uri.key + uri.file,\n                    Body: fStream\n                })\n            )\n            .catch((err) => {\n                throw new Error(\n                    `failed-upload-s3: Error while uploading to S3: ${err}`\n                )\n            })\n            .finally(() => {\n                fStream.close()\n            })\n\n        if (res.$metadata.httpStatusCode !== 200) {\n            throw new Error(\n                `failed-upload-s3: Error while uploading to S3: ${res.$metadata.httpStatusCode}`\n            )\n        }\n\n        if (!res.$metadata.requestId)\n            throw new Error(\n                `failed-upload-s3: Error while uploading to S3: ${res.$metadata.httpStatusCode}`\n            )\n        return res.$metadata.requestId\n    }\n\n    async initMultipartUpload(bucket: string, key: string): Promise<string> {\n        const client = s3Client({\n            credentials: credentials(\"default\"),\n            region: \"us-east-2\"\n        })\n\n        const command = new CreateMultipartUploadCommand({\n            Bucket: bucket,\n            ContentEncoding: \"utf8\",\n            ContentType: \"text/csv\",\n            Key: key\n        })\n\n        const result = await client.send(command)\n\n        if (result.$metadata.httpStatusCode !== 200) {\n            throw new Error(\n                `failed-multipart-upload: Error while creating multipart upload: ${result.UploadId} with status code ${result.$metadata.httpStatusCode}`\n            )\n        }\n\n        if (!result.UploadId) {\n            throw new Error(\n                `failed-multipart-upload: Error while creating multipart upload: ${result.UploadId}`\n            )\n        }\n\n        return result.UploadId\n    }\n\n    exec(cmd: string, args: string[]): ChildProcessWithoutNullStreams {\n        console.log(`exec: ${cmd} ${args.join(\" \")}`)\n\n        if (this.pcount > 5) {\n            throw new Error(`too-many-processes: ${this.pcount}`)\n        }\n\n        this.pcount++\n        return spawn(cmd, args, {})\n    }\n\n    promisifyProcessResult(\n        child: ChildProcessWithoutNullStreams\n    ): Promise<ProcessResult> {\n        const result: ProcessResult = {\n            stdout: \"\",\n            stderr: \"\",\n            code: 0\n        }\n\n        return new Promise((resolve, reject) => {\n            child.stdout.on(\"data\", (data) => {\n                result.stdout += data\n            })\n\n            child.stderr.on(\"data\", (data) => {\n                result.stderr += data\n            })\n\n            child.on(\"close\", (code) => {\n                result.code = code === 0 ? 0 : 1\n                resolve(result)\n            })\n\n            child.on(\"error\", (err) => {\n                reject(err)\n            })\n        })\n    }\n}\n\nexport async function createCatalog(\n    source: string,\n    opt: CatalogOptions\n): Promise<Catalog> {\n    return new Promise((resolve, reject) => {\n        if (!source) {\n            reject(new Error(`failed-to-create-dataset: source is required`))\n        }\n\n        if (!opt || !opt.destination) {\n            reject(\n                new Error(`failed-to-create-dataset: destination is required`)\n            )\n        }\n\n        if (!source.endsWith(\".csv\")) {\n            reject(\n                new Error(\n                    `failed to create dataset: ${source}, source must be a csv file`\n                )\n            )\n        }\n\n        const catalog = new Catalog(source, opt)\n\n        Promise.all([\n            catalog.determineEnv(),\n            catalog.detectShape(),\n            catalog.determineConnector(),\n            catalog.determineLoader()\n        ])\n            .then(() => {\n                console.log(`created catalog for ${source}`)\n                resolve(catalog)\n            })\n            .catch((err) => reject(err))\n    })\n}\n\nclass Workflow {\n    name: string\n    catalogs: Map<string, Catalog>\n    readonly createdAt: Date\n    env: env\n    stmt: string // sql statement\n\n    constructor(name: string) {\n        this.name = name\n        this.catalogs = new Map()\n        this.createdAt = new Date()\n        this.env = \"local\"\n        this.stmt = \"\"\n    }\n\n    list(): Catalog[] {\n        return Array.from(this.catalogs.values())\n    }\n\n    remove(dataset: Catalog) {\n        this.catalogs.delete(dataset.source)\n    }\n\n    get(source: string): Catalog | null {\n        return this.catalogs.get(source) || null\n    }\n\n    add(c: Catalog): string {\n        if (this.catalogs.has(c.source)) {\n            throw new Error(\n                `${c.source} already exists in workflow ${this.name}`\n            )\n        }\n\n        this.catalogs.set(c.source, c)\n\n        console.log(`added ${c.source} to the workflow`)\n\n        return c.source\n    }\n\n    async query(raw: string): Promise<ParsedStatement> {\n        console.log(`parsing statement: ${raw}`)\n\n        let result: ParsedStatement = {}\n\n        const child = spawn(sqlparser, [raw])\n\n        return new Promise((resolve, reject) => {\n            child.on(\"error\", (err) => {\n                reject(err)\n            })\n\n            child.stdout.on(\"data\", (data) => {\n                const parsed = JSON.parse(data.toString())\n                if (parsed.error) {\n                    reject(\n                        `failed-sqlparser: Error while parsing query: ${parsed.error}`\n                    )\n                }\n                result = parsed\n            })\n\n            child.on(\"close\", (code) => {\n                if (code !== 0) {\n                    reject(\n                        `failed-sqlparser: Error while parsing query: ${code}`\n                    )\n                }\n                console.log(JSON.stringify(result, null, 2))\n                resolve(result)\n            })\n        })\n    }\n}\n\nexport function createWorkflow(name: string): Workflow {\n    return new Workflow(name)\n}\n"],
  "mappings": "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",
  "names": []
}
