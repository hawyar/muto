{"mappings":"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","sources":["lib/index.ts","lib/engine.ts"],"sourcesContent":["export {createWorkflow} from \"./engine\"\n","import * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as rl from \"readline\"\nimport {spawn} from \"child_process\";\nimport {fromIni} from \"@aws-sdk/credential-providers\"\nimport {\n    S3Client,\n    S3ClientConfig,\n} from \"@aws-sdk/client-s3\";\n\n// errors thrown by the engine\ntype ShapeErrTypes = 'unrecognizedDelimiter' | 'noHeader' | 'invalidFileType' | 'rowWidthMismatch'\n\ntype supportedDelimiters = \",\" | \";\" | \"|\" | \":\" | \"\\t\" | \" \" | \"^\" | \"~\" | \"*\" | \"!\" | \"-\" | \"_\" | \"|\"\ntype env = 'local' | 'aws'\ntype connectorType = S3Client | fs.ReadStream;\n\n// Shape of a dataset object\ninterface Shape {\n    type: string,\n    columns: Array<string>,\n    header: boolean,\n    encoding: string,\n    bom: boolean,\n    spanMultipleLines: boolean,\n    quotes: boolean,\n    delimiter: string,\n    errors: { [key: string]: string },\n    warnings: { [key: string]: string },\n    preview: string[][],\n}\n\n// Dataset represents a file from a supported a data source\ninterface Dataset {\n    source: string\n    options: Options;\n    shape?: Shape\n    data?: string[][];\n    createdAt: Date;\n    connector: connectorType;\n}\n\n// Options for a dataset\ninterface Options {\n    destination: string;\n    columns: Array<string>,\n    header: boolean,\n    bom: boolean,\n    delimiter: supportedDelimiters\n}\n\n\nconst credentials = (profile: string) => fromIni({\n    profile: profile,\n    mfaCodeProvider: async (mfaSerial) => {\n        return mfaSerial\n    },\n});\n\n\n// Represents a workflow with a list of datasets in a local or cloud env\nclass Workflow {\n    name: string;\n    datasets: Map<string, Dataset>;\n    readonly createdAt: Date;\n    env: env;\n\n    constructor(name: string) {\n        this.name = name;\n        this.datasets = new Map();\n        this.createdAt = new Date();\n        this.env = 'local';\n    }\n\n    /**\n     * Creates new dataset, a connector must be provided\n     * @param source\n     * @param options\n     */\n    #newDataset(source: string, options: Options, connector: connectorType): Dataset {\n        return {\n            source,\n            options,\n            createdAt: new Date(),\n            connector,\n        }\n    }\n\n    /**\n     * List datasets in the workflow\n     * @param options\n     * @returns\n     */\n    list(): Dataset[] {\n        return Array.from(this.datasets.values());\n    }\n\n    /**\n     * Adds a dataset to workflow\n     * @param source\n     * @param options\n     * @returns\n     */\n    add(source: string, opt: Options) {\n        return new Promise((resolve, reject) => {\n\n            if (this.datasets.has(source)) {\n                reject(new Error(`Dataset ${opt.destination} already exists in the workflow`));\n            }\n\n            if (opt.destination === \"\") {\n                console.warn(`Dataset ${source} does not have a destination`);\n            }\n\n            if (opt.destination && opt.destination.startsWith(\"s3://\")) {\n                // const {data, err} = parseS3URI(opt.destination, {\n                //     file: false,\n                // });\n                //\n                // if (err) {\n                //     reject(err);\n                // }\n\n                const conn = this.s3Connector({\n                    credentials: credentials('default'),\n                    region: 'us-east-2',\n                });\n\n                const dataset = this.#newDataset(source, opt, conn);\n                this.datasets.set(source, dataset);\n                resolve(dataset.source);\n            }\n            if (\n                source.startsWith(\"/\") ||\n                source.startsWith(\"../\") ||\n                source.startsWith(\"./\")\n            ) {\n                if (!source.endsWith(\".csv\")) {\n                    reject(new Error(`${source} is not a CSV file`));\n                }\n                const conn = fs.createReadStream(source);\n\n                const dataset = this.#newDataset(source, opt, conn);\n                this.datasets.set(source, dataset);\n                resolve(dataset.source)\n            }\n            reject(new Error(`Invalid source ${source} type`));\n        });\n    }\n\n    /**\n     * Connects to given path directory in the filesystem\n     * @param path\n     * @returns {fs.Dirent[]}\n     */\n    fsConnector(path: string): fs.Dirent[] {\n        return fs.readdirSync(path, {withFileTypes: true});\n    }\n\n    /**\n     * Creates a new S3 client\n     * @param opt - S3 client config\n     * @returns S3Client\n     */\n    s3Connector(opt: S3ClientConfig): S3Client {\n        if (!opt.region) {\n            opt.region = 'us-east-2';\n        }\n        return new S3Client(opt);\n    }\n\n\n    // Early on we check the csv file for some attributes to determine the shape of the data\n    #detectShape(d: Dataset): Shape {\n        const shape: Shape = {\n            type: '',\n            columns: [''],\n            header: false,\n            encoding: 'utf-8',\n            bom: false,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: ',',\n            errors: {},\n            warnings: {},\n            preview: [['']],\n        };\n\n        if (!fs.existsSync(d.source)) {\n            throw new Error(`${d.source} does not exist, provide a valid path to a CSV file`)\n        }\n\n        if (os.platform() === \"win32\") {\n            console.error(`handle windows later`)\n            return shape;\n        }\n\n        const mime = spawn(\"file\", [d.source, \"--mime-type\"])\n\n        mime.stdout.on(\"data\", (data) => {\n            const type = data.toString().split(\":\")[1].trim();\n\n            if (type === \"text/csv\" || type === \"text/plain\") {\n                shape.type = type;\n            } else {\n                shape.errors[\"incorrectType\"] = `${d.source} is not a CSV file`;\n            }\n        });\n\n        mime.on(\"close\", (code) => {\n            if (code !== 0 || shape.type === \"\") {\n                console.warn(\"unable to use file() cmd\");\n            }\n        });\n\n        const readLine = rl.createInterface({\n            input: fs.createReadStream(d.source),\n            crlfDelay: Infinity,\n        });\n\n        let count = 0;\n        const max = 20;\n\n        // to store the column header if it exists for further checks\n        const first = {\n            row: [''],\n            del: \"\",\n        };\n\n        // hold the previous line while rl proceeds to next line using \\r\\n as a delimiter\n        let previous = \"\";\n\n        // create an array of delimiter from supported delimiter\n        const delimiters = [\",\", \";\", \"\\t\", \"|\", \":\", \" \", \"|\"];\n\n        readLine.on(\"line\", (current) => {\n\n            if (count === 0) {\n                delimiters.forEach((d) => {\n                    if (current.split(d).length > 1) {\n                        first.row = current.split(d)\n                        first.del = d;\n                    }\n                });\n\n                if (first.del === \"\" || first.row.length <= 1) {\n                    shape.errors[\"unrecognizedDelimiter\"] = `${d.source} does not have a recognized delimiter`;\n                    shape.header = false;\n                }\n\n                const isDigit = /\\d+/;\n\n                // betting on numbers should not appear as header values\n                const hasDigitInHeader = first.row.some((el) => isDigit.test(el));\n\n                if (hasDigitInHeader) {\n                    shape.header = false;\n                    shape.warnings[\"noHeader\"] = `no header found`;\n                    count++;\n                    return;\n                }\n\n                shape.header = true;\n                shape.delimiter = first.del;\n                shape.columns = first.row;\n            }\n\n            if (count > 0 && count < max) {\n                // if odd number of quotes on current line then there is a chance the record spans the next line\n                const inlineQuotes = current.split(`\"`).length - 1;\n\n                if (previous) {\n                    if (inlineQuotes % 2 !== 0) {\n                        // TODO: make sure previous + current\n                        // console.log(previous + l);\n                        shape.spanMultipleLines = true;\n                    }\n                }\n                // check if odd number of quotes and consider escaped quotes such as: \"aaa\",\"b\"\"bb\",\"ccc\"\n                if (\n                    inlineQuotes % 2 !== 0 &&\n                    current.split(`\"\"`).length - 1 !== 1\n                ) {\n                    previous = current;\n                }\n\n                const width = current.split(first.del).length;\n                if (width !== first.row.length) {\n                    shape.errors['rowWidthMismatch'] = `row width mismatch`;\n                    return;\n                }\n                shape.preview.push(current.split(first.del));\n            }\n            count++;\n        });\n        return shape;\n    }\n\n    /**\n     * Parse (s3://) style uri\n     */\n    #parseS3URI(\n        uri: string,\n        options: {\n            file: boolean;\n        }\n    ): {\n        data: {\n            bucket: string;\n            key: string;\n            file: string;\n        };\n        err: string;\n    } {\n        const opt = {\n            file: options && options.file ? options.file : false,\n        };\n\n        if (!uri.startsWith(\"s3://\") || uri.split(\":/\")[0] !== \"s3\") {\n            throw new Error(\"Invalid S3 URI\");\n        }\n\n        let err = \"\";\n\n        const result = {\n            bucket: \"\",\n            key: \"\",\n            file: \"\",\n        };\n\n        const src = uri.split(\":/\")[1];\n        const [bucket, ...keys] = src.split(\"/\").splice(1);\n\n        result.bucket = bucket;\n        result.key = keys.join(\"/\");\n\n        keys.forEach((k, i) => {\n            if (i === keys.length - 1) {\n                const last = k.split(\".\").length;\n                if (opt.file && last === 1) err = `uri should be a given, given: ${uri}`;\n\n                if (!opt.file && last === 1) return;\n\n                if (!opt.file && last > 1) {\n                    err = `Invalid S3 uri, ${uri} should not end with a file name`;\n                    return;\n                }\n\n                if (!opt.file && k.split(\".\")[1] !== \"\" && last > 1)\n                    err = `${uri} should not be a file endpoint: ${k}`;\n\n                if (last > 1 && k.split(\".\")[1] !== \"\") result.file = k;\n            }\n        });\n        return {\n            data: result,\n            err: err,\n        };\n    }\n}\n\n/**\n * Returns a new workflow\n * @param {string} name - Name of the workflow\n * @returns {Workflow} - New workflow\n */\n\nexport function createWorkflow(name: string): Workflow {\n    return new Workflow(name);\n}\n\n\n// listFilesInS3(path: { bucket: string, key: string }) {\n//     try {\n//         const client = this.s3Connector({})\n//\n//         const command = new ListObjectsCommand({\n//             // eslint-disable-next-line no-mixed-spaces-and-tabs\n//             Bucket: bucket,\n//             Prefix: key,\n//         });\n//\n//         const response = client.send(command);\n//\n//         if (response.$metadata.httpStatusCode !== 200) {\n//             console.log(response.$metadata)\n//             return\n//         }\n//         return response.Contents\n//     } catch (err) {\n//         console.log(err)\n//     }\n// }\n\n\n// // get the first line (header column)\n// const rl = readline.createInterface({\n// \tinput: d.options.connector,\n// \tcrlfDelay: Infinity,\n// });\n\n// let count = 0;\n\n// // first 200 rows on open\n// let firstViewMax = 200;\n\n// rl.on(\"line\", (line: any) => {\n// \tif (count === 0) {\n// \t\td.options.columns = line.split(\",\");\n// \t\tcount++;\n// \t\treturn;\n// \t}\n\n// \tif (count > firstViewMax) {\n// \t\trl.close();\n// \t\treturn;\n// \t}\n\n// \tconst row = line.split(\",\");\n// \td.data.push(row);\n\n// \tcount++;\n// }).on(\"close\", () => {\n// \trl.close();\n// });\n// }\n// this.datasets.set(d.source, d);\n\n\n// /**\n//  * Initiates a multipart upload and returns an upload ID\n//  * @returns {string} uploadID\n//  * @private\n//  */\n// initMultipartUpload(\n// \td: Dataset,\n// \tbucket: string,\n// \tkey: string\n// ): Promise<string> {\n// \treturn new Promise((resolve, reject) => {\n// \t\ttry {\n// \t\t\tconst client = d.options.loader;\n\n// \t\t\tif (!(client instanceof S3Client))\n// \t\t\t\tthrow new Error(`Invalid operation for ${d.source}`);\n\n// \t\t\tconst command = new CreateMultipartUploadCommand({\n// \t\t\t\tBucket: bucket,\n// \t\t\t\tContentEncoding: \"utf8\",\n// \t\t\t\tContentType: \"text/csv\",\n// \t\t\t\tKey: key,\n// \t\t\t});\n\n// \t\t\tclient\n// \t\t\t\t.send(command)\n// \t\t\t\t.then((data) => {\n// \t\t\t\t\tif (data.UploadId) {\n// \t\t\t\t\t\tresolve(data.UploadId);\n// \t\t\t\t\t}\n// \t\t\t\t\treject(new Error(\"Invalid upload ID\"));\n// \t\t\t\t})\n// \t\t\t\t.catch((error) => {\n// \t\t\t\t\treject(error);\n// \t\t\t\t})\n// \t\t\t\t.finally(() => {\n// \t\t\t\t\tconsole.log(\"initialized multipart upload\");\n// \t\t\t\t});\n// \t\t} catch (err) {\n// \t\t\treject(err);\n// \t\t}\n// \t});\n// }\n\n// /**\n//  * Saves the dataset to the storage (AWS S3 or Fs)\n//  * @param source\n//  * @param options\n//  * @private\n//  */\n// save(d: Dataset) {\n// \treturn new Promise((resolve, reject) => {\n// \t\ttry {\n// \t\t\tconst size = fs.fstatSync(d.source).size;\n\n// \t\t\tif (size > 50000) {\n// \t\t\t\tconsole.log(\n// \t\t\t\t\t\"file size is greater than threshold of 50MB, breaking into chunks\"\n// \t\t\t\t);\n// \t\t\t}\n// \t\t} catch (err) {\n// \t\t\treject(err);\n// \t\t}\n// \t});\n// }\n\n\n//\n// /**\n//  * Loads a CSV file into a dataset\n//  * @param path\n//  * @param options\n//  * @returns Promise<Dataset>\n//  */\n// CsvLoader(d: Dataset): Promise<Dataset> {\n//     return new Promise((resolve, reject) => {\n//         try {\n//             if (typeof d.source !== \"string\") {\n//                 reject(new Error(\"Not implemented\"));\n//             }\n//\n//             if (\n//                 d.options.isRemote &&\n//                 d.source.startsWith(\"s3://\") &&\n//                 d.source.split(\":/\")[0] === \"s3\"\n//             ) {\n//                 // remove the s3://\n//                 const src = d.source.split(\":/\")[1];\n//\n//                 const [bucket, ...keys] = src.split(\"/\").splice(1);\n//\n//                 console.log(bucket);\n//                 console.log(keys.join(\"/\"));\n//\n//                 // const command = new GetObjectCommand({\n//                 // \tBucket: bucket,\n//                 // \tKey: key,\n//                 // \tRange: \"bytes=0-1\",\n//                 // });\n//\n//                 // const result = await s3.send(command);\n//\n//                 // if (result.$metadata.httpStatusCode !== 200) {\n//                 // \treject(new Error(\"File could not be read\"));\n//                 // }\n//\n//                 // if (result.ContentType !== \"text/csv\") {\n//                 // \treject(new Error(\"File is not a CSV file\"));\n//                 // }\n//\n//                 // if (result.ContentLength === 0) {\n//                 // \treject(new Error(\"File is empty\"));\n//                 // }\n//\n//                 // if (result.Body) {\n//                 // \tconst columns = result.Body.toString();\n//\n//                 // \tconsole.log(columns);\n//\n//                 // \tresolve(d);\n//                 // }\n//             }\n//             resolve(d);\n//         } catch (err) {\n//             reject(err);\n//         }\n//     });\n// }\n\n"],"names":[],"version":3,"file":"index.js.map"}