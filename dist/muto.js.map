{
  "version": 3,
  "sources": ["../lib/engine.ts", "../lib/types.ts"],
  "sourcesContent": ["import * as fs from \"fs\";\nimport {CreateMultipartUploadCommand, PutObjectCommand, S3Client, S3ClientConfig} from \"@aws-sdk/client-s3\";\nimport {fromIni} from \"@aws-sdk/credential-providers\";\nimport {AthenaClient, AthenaClientConfig} from \"@aws-sdk/client-athena\";\nimport {ChildProcessWithoutNullStreams, spawn} from \"child_process\";\nimport os from \"os\";\nimport path from \"path\";\nimport {createInterface} from \"readline\";\nimport {\n    connectorType,\n    Dataset,\n    DatasetOptions,\n    datasetStateType,\n    env,\n    loaderType,\n    mlr,\n    ProcessResult,\n    Shape,\n    sqlparser,\n    Workflow,\n} from \"./types\"\n\nclass _Dataset implements Dataset {\n    name: string\n    source: string;\n    destination: string;\n    addedAt: Date;\n    options: DatasetOptions;\n    shape: Shape\n    env: env;\n    state: datasetStateType\n    connector: connectorType | null\n    loader: loaderType | null\n    pcount: number\n\n    constructor(source: string, options: DatasetOptions) {\n        this.name = options && options.name ? options.name : path.basename(source);\n        this.source = source;\n        this.destination = options.destination\n        this.options = options\n        this.env = this.determineEnv()\n        this.shape = {\n            type: \"\",\n            columns: [],\n            header: false,\n            encoding: \"\",\n            bom: false,\n            size: 0,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: \"\",\n            errors: {},\n            warnings: {},\n            preview: []\n        }\n        this.addedAt = new Date();\n        this.state = 'init'\n        this.connector = null\n        this.loader = null\n        this.pcount = 0\n    }\n\n    async toJson(): Promise<ChildProcessWithoutNullStreams> {\n        const json = this.exec(mlr, [\"--icsv\", \"--ojson\", \"clean-whitespace\", this.source])\n        if (!json.stdout) {\n            throw new Error(`failed to convert ${this.source} from CSV to JSON`)\n        }\n        return json\n    }\n\n    async toCSV(): Promise<ChildProcessWithoutNullStreams> {\n        const json = this.exec(mlr, [\"--icsv\", \"--ocsv\", \"cat\", this.source])\n        if (!json.stdout) {\n            throw new Error(`failed to convert ${this.source} from JSON to CSV`)\n        }\n        return json\n    }\n\n\n    async rowCount(): Promise<number> {\n        const count = await this.exec(mlr, [`--ojson`, `count`, this.source])\n\n        const rowCountExec = await this.promisifyProcessResult(count)\n\n        if (rowCountExec.code !== 0) {\n            throw new Error(`Error while counting rows: ${rowCountExec.stderr}`)\n        }\n\n        if (rowCountExec.stderr) {\n            throw new Error(rowCountExec.stderr)\n        }\n\n        const r = JSON.parse(rowCountExec.stdout)\n\n        if (r.length === 0) {\n            throw new Error('No rows found')\n        }\n\n        return r[0].count\n    }\n\n\n    async getColumnHeader(): Promise<string[] | null> {\n        const res = await this.exec(mlr, [`--icsv`, `--ojson`, `head`, `-n`, `1`, this.source])\n\n        const colExec = await this.promisifyProcessResult(res)\n\n        if (colExec.code !== 0) {\n            return null\n        }\n\n        if (colExec.stderr) {\n            throw new Error(colExec.stderr)\n        }\n        const columns = JSON.parse(colExec.stdout)\n\n        if (columns.length === 0) {\n            this.shape.header = false\n            return null\n        }\n\n        this.shape.columns = Object.keys(columns[0])\n        this.shape.header = true\n        return this.shape.columns\n    }\n\n    async formatValues() {\n        // --opprint format-values\n        const res = await this.exec(mlr, [`--icsv`, `format-values`, this.source])\n        const formatVal = await this.promisifyProcessResult(res)\n\n        if (formatVal.code !== 0) {\n            return null\n        }\n\n        if (formatVal.stderr) {\n            throw new Error(formatVal.stderr)\n        }\n\n        return this.shape.columns\n    }\n\n\n    async preview(count = 20, streamTo?: string): Promise<string[][] | string> {\n        let write: fs.WriteStream\n\n        const maxPreview = 1024 * 1024 * 10\n\n        const fsp = fs.promises\n        const stat = await fsp.stat(this.source)\n\n        if (streamTo && streamTo !== this.source && fs.createWriteStream(streamTo) instanceof fs.WriteStream || stat.size > maxPreview) {\n\n            if (streamTo === undefined) throw new Error('stream-destination-undefined')\n            write = fs.createWriteStream(streamTo)\n\n            const previewExec = await this.exec(mlr, [`--icsv`, `--ojson`, `head`, `-n`, count.toString(), this.source])\n\n            previewExec.stdout.pipe(write)\n\n            console.warn(`\uD83D\uDC40 Preview saved to: ${streamTo}`)\n            return streamTo\n        }\n\n        const previewExec = await this.exec(mlr, [`--icsv`, `--ojson`, `head`, `-n`, count.toString(), this.source])\n\n        const prev = await this.promisifyProcessResult(previewExec)\n\n        if (prev.stderr) {\n            throw new Error(prev.stderr)\n        }\n\n        if (prev.code !== 0) {\n            throw new Error(`Error while executing mlr command`)\n        }\n\n        this.shape.preview = JSON.parse(prev.stdout)\n        return this.shape.preview\n    }\n\n\n    async detectShape(): Promise<Shape> {\n        const path = this.source\n        const shape: Shape = {\n            type: '',\n            size: 0,\n            columns: [''],\n            header: false,\n            encoding: 'utf-8',\n            bom: false,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: ',',\n            errors: {},\n            warnings: {},\n            preview: [['']],\n        };\n\n        if (!fs.existsSync(path)) {\n            throw new Error(`path-doesnt-exists: ${path} ,provide a valid path to a CSV file`)\n        }\n\n        const stat = fs.statSync(path)\n        this.shape.size = stat.size\n\n        if (stat.size > 1024 * 1024 * 1024) {\n            throw new Error(`file-size-exceeds-limit: ${path} is too large, please limit to under 1GB for now`)\n        }\n\n        if (!fs.existsSync(path)) {\n            throw new Error(`${path} does not exist, provide a valid path to a CSV file`)\n        }\n\n        if (os.platform() === \"win32\") {\n            // TODO: handle\n            throw new Error(`scream`)\n        }\n\n        const mime = this.exec(\"file\", [path, \"--mime-type\"])\n\n        const mimeRes = await this.promisifyProcessResult(mime)\n\n        if (mimeRes.stderr) {\n            throw new Error(`failed-to-detect-mime-type: ${mimeRes.stderr}`)\n        }\n\n        if (mimeRes.code !== 0) {\n            throw new Error(`failed-to-detect-mime-type: ${mimeRes.stderr}`)\n        }\n\n        shape.type = mimeRes.stdout.trim()\n\n        const readLine = createInterface({\n            input: fs.createReadStream(path),\n            crlfDelay: Infinity,\n        });\n\n        let count = 0;\n        const max = 20;\n\n        const first = {\n            row: [''],\n            del: \"\",\n        };\n\n        // hold the previous line while rl proceeds to next line using \\r\\n as a delimiter\n        let previous = \"\";\n\n        const delimiters = [\",\", \";\", \"\\t\", \"|\", \":\", \" \", \"|\"];\n\n        readLine.on(\"line\", (current) => {\n            if (count === 0) {\n                delimiters.forEach((d) => {\n                    if (current.split(d).length > 1) {\n                        first.row = current.split(d)\n                        first.del = d;\n                    }\n                });\n\n                if (first.del === \"\" || first.row.length <= 1) {\n                    shape.errors[\"unrecognizedDelimiter\"] = `${path} does not have a recognized delimiter`;\n                    shape.header = false;\n                }\n                const isDigit = /\\d+/;\n\n                // assuming that numbers shouldn't start as column header\n                const hasDigitInHeader = first.row.some((el) => isDigit.test(el));\n                // if (hasDigitInHeader) {\n                //     shape.header = false;\n                //     shape.warnings[\"noHeader\"] = `no header found`;\n                //     count++;\n                //     return;\n                // }\n                shape.header = true;\n                shape.delimiter = first.del;\n                shape.columns = first.row;\n            }\n\n            if (count > 0 && count < max) {\n                // there is a chance the record spans next line\n                const inlineQuotes = current.split(`\"`).length - 1;\n\n                if (previous) {\n                    if (inlineQuotes % 2 !== 0) {\n                        // TODO: make sure previous + current\n                        // console.log(previous + l);\n                        shape.spanMultipleLines = true;\n                    }\n                }\n                // if odd number of quotes and consider escaped quotes such as: \"aaa\",\"b\"\"bb\",\"ccc\"\n                if (\n                    inlineQuotes % 2 !== 0 &&\n                    current.split(`\"\"`).length - 1 !== 1\n                ) {\n                    previous = current;\n                }\n\n                const width = current.split(first.del).length;\n\n                if (width !== first.row.length) {\n                    shape.errors['rowWidthMismatch'] = `row width mismatch`;\n                    return;\n                }\n                shape.preview.push(current.split(first.del));\n            }\n            count++;\n        });\n        return shape;\n    }\n\n    determineLoader(): void {\n        if (this.destination.startsWith(\"s3://\")) {\n            this.loader = s3Client({\n                credentials: credentials(\"default\"),\n                region: \"us-east-2\",\n            });\n            return;\n        }\n\n        if (\n            this.source.startsWith(\"/\") ||\n            this.source.startsWith(\"../\") ||\n            this.source.startsWith(\"./\")\n        ) {\n            this.loader = fs.createReadStream(this.source);\n            return;\n        }\n    }\n\n    determineConnector(): void {\n        if (this.env === \"local\") {\n            this.connector = fs.createReadStream(this.source);\n            return;\n        }\n\n        if (this.env === \"aws\") {\n            this.connector = s3Client({\n                credentials: credentials(\"default\"),\n                region: \"us-east-2\",\n            });\n            return;\n        }\n        throw new Error(`unsupported-source for: ${this.source}`)\n    }\n\n    determineEnv(): env {\n        if (\n            this.source.startsWith(\"/\") ||\n            this.source.startsWith(\"../\") ||\n            this.source.startsWith(\"./\")\n        ) {\n            return \"local\";\n        }\n\n        if (this.source.startsWith(\"s3://\")) {\n            return \"aws\";\n        }\n\n        throw new Error(`invalid-source-type: ${this.source}`);\n    }\n\n    fileSize(): number {\n        const max = 1024 * 1024 * 50\n\n        if (!fs.existsSync(this.source)) {\n            throw new Error(`path-doesnt-exists: ${this.source} ,provide a valid path to a CSV file`)\n        }\n\n        const stat = fs.statSync(this.source)\n\n        if (stat.size > max) {\n            throw new Error(`file-size-exceeds-limit: ${this.source} is too large, please limit to 50MB`)\n        }\n        return stat.size\n    }\n\n    async uploadToS3(): Promise<string> {\n        if (!this.source || !this.destination) {\n            throw new Error('source or destination not set. Both must be defined to upload to S3')\n        }\n\n        const fStream = fs.createReadStream(this.source)\n\n        if (!fStream.readable) {\n            throw new Error('failed-to-read-source: Make sure the provided file is readable')\n        }\n\n        const fSize = this.fileSize()\n\n        if (fSize > 100 * 1024 * 1024) {\n            //TODO: init multipart upload then upload parts\n            console.warn(`file size ${fSize} is larger than 100MB`)\n        }\n\n        const {data: uri, err} = parseS3Uri(this.destination, {\n            file: true,\n        });\n\n        if (err.toString().startsWith(`invalid-s3-uri`)) {\n            throw new Error(`failed-to-parse-s3-uri: ${err}`)\n        }\n\n        if (!uri.file) {\n            uri.file = path.basename(this.source)\n            console.warn(\"Destination filename not provided. Using source source basename\" + uri.file)\n        }\n\n        console.log(`uploading ${this.source} to ${this.destination}`);\n\n        const s3 = s3Client({\n            region: \"us-east-2\",\n        })\n\n        const res = await s3.send(new PutObjectCommand({\n            Bucket: uri.bucket,\n            Key: uri.key + uri.file,\n            Body: fStream,\n        })).catch(err => {\n            throw new Error(`failed-upload-s3: Error while uploading to S3: ${err}`)\n        }).finally(() => {\n            fStream.close()\n        })\n\n        if (res.$metadata.httpStatusCode !== 200) {\n            throw new Error(`failed-upload-s3: Error while uploading to S3: ${res.$metadata.httpStatusCode}`)\n        }\n\n        if (!res.$metadata.requestId) throw new Error(`failed-upload-s3: Error while uploading to S3: ${res.$metadata.httpStatusCode}`)\n        return res.$metadata.requestId\n    }\n\n    async initMultipartUpload(\n        bucket: string,\n        key: string\n    ): Promise<string> {\n\n        const client = s3Client({\n            credentials: credentials(\"default\"),\n            region: \"us-east-2\",\n        });\n\n        const command = new CreateMultipartUploadCommand({\n            Bucket: bucket,\n            ContentEncoding: \"utf8\",\n            ContentType: \"text/csv\",\n            Key: key,\n        });\n\n        const result = await client.send(command);\n\n        if (result.$metadata.httpStatusCode !== 200) {\n            throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${result.UploadId} with status code ${result.$metadata.httpStatusCode}`)\n        }\n\n        if (!result.UploadId) {\n            throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${result.UploadId}`)\n        }\n\n        return result.UploadId\n    }\n\n    exec(cmd: string, args: string[]): ChildProcessWithoutNullStreams {\n        console.log(`exec: ${cmd} ${args.join(' ')}`)\n\n        if (this.pcount > 5) {\n            throw new Error(`too-many-processes: ${this.pcount}`)\n        }\n\n        this.pcount++\n        return spawn(cmd, args, {})\n    }\n\n    promisifyProcessResult(child: ChildProcessWithoutNullStreams): Promise<ProcessResult> {\n        const result: ProcessResult = {\n            stdout: '',\n            stderr: '',\n            code: 0\n        }\n\n        return new Promise((resolve, reject) => {\n            child.stdout.on('data', (data) => {\n                result.stdout += data\n            })\n\n            child.stderr.on('data', (data) => {\n                result.stderr += data\n            })\n\n            child.on('close', (code) => {\n                result.code = code === 0 ? 0 : 1\n                resolve(result)\n            })\n\n            child.on('error', (err) => {\n                reject(err)\n            })\n        })\n    }\n}\n\nexport function createDataset(source: string, opt: DatasetOptions): Dataset {\n    return new _Dataset(source, opt);\n}\n\nfunction parseQuery(query: string): Promise<any> {\n    const qq = {\n        query: query,\n        select: [],\n        from: [],\n        where: [],\n        orderBy: [],\n        groupBy: [],\n        limit: null,\n        offset: null,\n    }\n\n    const child = spawn(sqlparser, [qq.query])\n\n    return new Promise((resolve, reject) => {\n        child.on('error', (err) => {\n            reject(err)\n        })\n\n        child.on('close', (code) => {\n            if (code !== 0) {\n                reject(`failed-sqlparser: Error while parsing query: ${code}`)\n            }\n        })\n\n        child.stdout.on('data', (data) => {\n            const parsed = JSON.parse(data.toString())\n            if (parsed.error) {\n                reject(`failed-sqlparser: Error while parsing query: ${parsed.error}`)\n            }\n            resolve(parsed)\n        })\n\n    })\n}\n\nclass _Workflow implements Workflow {\n    name: string;\n    datasets: Map<string, Dataset>;\n    readonly createdAt: Date;\n    env: env;\n    queryy: string;\n\n    constructor(name: string) {\n        this.name = name;\n        this.datasets = new Map();\n        this.createdAt = new Date();\n        this.env = 'local';\n        this.queryy = '';\n    }\n\n    list(): Dataset[] {\n        return Array.from(this.datasets.values());\n    }\n\n    remove(dataset: Dataset) {\n        this.datasets.delete(dataset.source);\n    }\n\n    get(source: string): Dataset | null {\n        return this.datasets.get(source) || null;\n    }\n\n    add(d: Dataset): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (this.datasets.has(d.source)) {\n                reject(`failed-add-dataset: Dataset with source ${d.source} already exists`)\n            }\n            Promise.all([d.determineConnector(), d.determineLoader()]).catch(err => {\n                throw new Error(err)\n            }).then(() => {\n                this.datasets.set(d.source, d);\n                resolve(d.source);\n            }).catch(err => {\n                reject(err)\n            })\n        })\n    }\n\n    query(q: string): Promise<string> {\n        parseQuery(q).then(parsed => {\n            this.queryy = q;\n            console.log(parsed)\n        }).catch(err => {\n            throw new Error(err)\n        })\n        return new Promise((resolve, reject) => {\n            resolve(\"ok\")\n        })\n    }\n}\n\nexport function createWorkflow(name: string): Workflow {\n    return new _Workflow(name);\n}\n\nconst credentials = (profile: string) => fromIni({\n    profile: profile,\n    mfaCodeProvider: async (mfaSerial) => {\n        return mfaSerial\n    },\n});\n\nlet s3: S3Client;\n\nfunction s3Client(config: S3ClientConfig): S3Client {\n    if (!s3) {\n        console.log('creating s3 client')\n        s3 = new S3Client(config);\n    }\n    return s3;\n}\n\nlet athena: AthenaClient\n\nfunction athenaClient(config: AthenaClientConfig): AthenaClient {\n    if (!athena) {\n        console.log('creating athena client')\n        athena = new AthenaClient(config);\n    }\n    return athena;\n}\n\n/**\n * Parses S3 (s3://) style URIs\n */\nfunction parseS3Uri(\n    uri: string,\n    options: {\n        file: boolean;\n    }\n): {\n    data: {\n        bucket: string;\n        key: string;\n        file: string;\n    };\n    err: string;\n} {\n    const opt = {\n        file: options && options.file ? options.file : false,\n    };\n\n    if (!uri.startsWith(\"s3://\") || uri.split(\":/\")[0] !== \"s3\") {\n        throw new Error(`invalid-s3-uri: ${uri}`);\n    }\n\n    let err = \"\";\n    const result = {\n        bucket: \"\",\n        key: \"\",\n        file: \"\",\n    };\n\n    const src = uri.split(\":/\")[1];\n    const [bucket, ...keys] = src.split(\"/\").splice(1);\n\n    result.bucket = bucket;\n    result.key = keys.join(\"/\");\n\n    keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n            const last = k.split(\".\").length;\n            if (opt.file && last === 1) err = `uri should be a given, given: ${uri}`;\n\n            if (!opt.file && last === 1) return;\n\n            if (!opt.file && last > 1) {\n                err = `Invalid S3 uri, ${uri} should not end with a file name`;\n                return;\n            }\n\n            if (!opt.file && k.split(\".\")[1] !== \"\" && last > 1)\n                err = `${uri} should not be a file endpoint: ${k}`;\n\n            if (last > 1 && k.split(\".\")[1] !== \"\") result.file = k;\n        }\n    });\n    return {\n        data: result,\n        err: err,\n    };\n}\n", "import {S3Client} from \"@aws-sdk/client-s3\";\nimport {join} from \"path\";\nimport fs from \"fs\";\nimport {ChildProcessWithoutNullStreams,} from \"child_process\";\n\nexport enum Delimiter {\n    COMMA = \",\",\n    TAB = \"\\t\",\n    SPACE = \" \",\n    PIPE = \"|\",\n    SEMICOLON = \";\",\n    COLON = \":\",\n    NONE = \"\",\n}\n\nexport const mlr = join(process.cwd(), 'node_modules', '.bin', 'mlr@v6.0.0')\nexport const sqlparser = join(process.cwd(), 'node_modules', '.bin', \"sqlparser@v0.1.4\")\n\nexport type env = 'local' | 'aws'\nexport type connectorType = S3Client | fs.ReadStream\nexport type loaderType = S3Client | fs.ReadStream\n\n// TODO: better error message for errors in transform\nexport type datasetStateType = 'init' | 'transforming' | 'uploading' | 'cancelled' | 'uploaded' | 'ready'\n// type ShapeErrType = 'unrecognizedDelimiter' | 'noHeader' | 'invalidFileType' | 'rowWidthMismatch'\n\nexport type Shape = {\n    type: string,\n    columns: Array<string>,\n    header: boolean,\n    encoding: string,\n    bom: boolean,\n    size: number,\n    spanMultipleLines: boolean,\n    quotes: boolean,\n    delimiter: string,\n    errors: { [key: string]: string }\n    warnings: { [key: string]: string },\n    preview: string[][],\n}\nexport type DatasetOptions = {\n    name: string,\n    destination: string;\n    columns: Array<string>,\n    header: boolean,\n    quotes: boolean,\n    output: 'csv' | 'json'\n    delimiter: Delimiter\n}\n\nexport interface Dataset {\n    source: string\n    destination: string\n    addedAt: Date;\n    options: DatasetOptions;\n    shape: Shape\n    state: datasetStateType\n    connector: connectorType | null\n    loader: loaderType | null\n\n\n    toJson(): Promise<ChildProcessWithoutNullStreams>\n\n    toCSV(): Promise<ChildProcessWithoutNullStreams>\n\n    determineEnv(): env\n\n    determineConnector(): void\n\n    determineLoader(): void\n\n    getColumnHeader(): Promise<string[] | null>\n\n    rowCount(): Promise<number>\n\n    fileSize(): number\n\n    preview(count: number, streamTo?: string): Promise<string[][] | string>\n\n    detectShape(): Promise<Shape>\n\n    uploadToS3(bucket: string, key: string): Promise<string>\n\n    initMultipartUpload(bucket: string, key: string): Promise<string>\n\n}\n\n\nexport interface Workflow {\n    name: string\n    createdAt: Date\n    datasets: Map<string, Dataset>\n    env: env\n    queryy: string\n\n    add(dataset: Dataset): Promise<string>\n\n    query(q: string): Promise<string>\n\n    remove(dataset: Dataset): void\n\n    get(name: string): Dataset | null\n\n    list(): Array<Dataset>\n}\n\nexport type ProcessResult = {\n    stdout: string,\n    stderr: string,\n    code: number\n}\n"],
  "mappings": "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",
  "names": []
}
