{
  "version": 3,
  "sources": ["../lib/engine.ts", "../lib/types.ts"],
  "sourcesContent": ["import * as fs from \"fs\";\nimport {readFileSync, writeFileSync} from 'atomically';\nimport {CreateMultipartUploadCommand, PutObjectCommand, S3Client, S3ClientConfig} from \"@aws-sdk/client-s3\";\nimport {fromIni} from \"@aws-sdk/credential-providers\";\nimport {ChildProcessWithoutNullStreams, spawn} from \"child_process\";\nimport os from \"os\";\nimport path from \"path\";\nimport {createInterface} from \"readline\";\nimport {\n    Cache,\n    connectorType,\n    Dataset,\n    DatasetOptions,\n    datasetStateType,\n    env,\n    mlrCmd,\n    ProcessResult,\n    Shape\n} from \"./types\"\n\nconst credentials = (profile: string) => fromIni({\n    profile: profile,\n    mfaCodeProvider: async (mfaSerial) => {\n        return mfaSerial\n    },\n});\n\nlet s3: S3Client;\n\n/**\n * Creates a new S3 client if one already doesn't exist.\n *  @param {S3ClientConfig} config\n *  @returns {S3Client}\n */\nfunction s3Client(config: S3ClientConfig) {\n    if (!s3) {\n        console.log('creating s3 client')\n        s3 = new S3Client(config);\n    }\n    return s3;\n}\n\n/**\n * Parses S3 (s3://) style URIs\n */\nfunction parseS3Uri(\n    uri: string,\n    options: {\n        file: boolean;\n    }\n): {\n    data: {\n        bucket: string;\n        key: string;\n        file: string;\n    };\n    err: string;\n} {\n    const opt = {\n        file: options && options.file ? options.file : false,\n    };\n\n    if (!uri.startsWith(\"s3://\") || uri.split(\":/\")[0] !== \"s3\") {\n        throw new Error(`invalid-s3-uri: ${uri}`);\n    }\n\n    let err = \"\";\n\n    const result = {\n        bucket: \"\",\n        key: \"\",\n        file: \"\",\n    };\n\n    const src = uri.split(\":/\")[1];\n    const [bucket, ...keys] = src.split(\"/\").splice(1);\n\n    result.bucket = bucket;\n    result.key = keys.join(\"/\");\n\n    keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n            const last = k.split(\".\").length;\n            if (opt.file && last === 1) err = `uri should be a given, given: ${uri}`;\n\n            if (!opt.file && last === 1) return;\n\n            if (!opt.file && last > 1) {\n                err = `Invalid S3 uri, ${uri} should not end with a file name`;\n                return;\n            }\n\n            if (!opt.file && k.split(\".\")[1] !== \"\" && last > 1)\n                err = `${uri} should not be a file endpoint: ${k}`;\n\n            if (last > 1 && k.split(\".\")[1] !== \"\") result.file = k;\n        }\n    });\n    return {\n        data: result,\n        err: err,\n    };\n}\n\n\n/**\n * Dataset represent a file for processing\n */\nclass _Dataset implements Dataset {\n    source: string;\n    destination: string;\n    addedAt: Date;\n    options: DatasetOptions;\n    shape: Shape\n    cached: boolean;\n    state: datasetStateType\n    connector: connectorType | null\n    env: string\n\n    constructor(source: string, options: DatasetOptions) {\n        this.source = source;\n        this.cached = false;\n        this.destination = options.destination\n        this.options = options;\n        this.env = this.determineSource();\n        this.shape = {\n            type: \"\",\n            columns: [],\n            header: false,\n            encoding: \"\",\n            bom: false,\n            size: 0,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: \"\",\n            errors: {},\n            warnings: {},\n            preview: [[]]\n        }\n        this.addedAt = new Date();\n        this.state = 'init'\n        this.connector = null\n    }\n\n    /**\n     * Convert CSV to JSON\n     * @return {Promise<string>} source of the dataset\n     */\n    async toJson(): Promise<string> {\n        const write = fs.createWriteStream(this.destination)\n\n        const json = this.exec(mlrCmd, [\"--icsv\", \"--ojson\", \"clean-whitespace\", \"cat\", this.source])\n\n        json.stdout.pipe(write)\n\n        write.on('close', () => {\n            console.log(\"\uD83D\uDCDD Dataset converted to JSON\")\n            return this.destination\n        })\n\n        write.on('error', (err) => {\n            throw new Error(err.message)\n        })\n\n        return this.destination\n    }\n\n    /**\n     * Count number of rows\n     * @return {Promise<string>} number of rows\n     */\n    async rowCount(): Promise<number> {\n        const count = await this.exec(mlrCmd, [`--ojson`, `count`, this.source])\n\n        const rowCountExec = await this.promisifyProcessResult(count)\n\n        if (rowCountExec.code !== 0) {\n            throw new Error(`Error while counting rows: ${rowCountExec.stderr}`)\n        }\n\n        if (rowCountExec.stderr) {\n            throw new Error(rowCountExec.stderr)\n        }\n\n        const r = JSON.parse(rowCountExec.stdout)\n\n        if (r.length === 0) {\n            throw new Error('No rows found')\n        }\n        return r[0].count\n    }\n\n    /**\n     * Extracts the header row from the dataset, defined columns\n     * @return Promise<string[] | null> header row or null if no header\n     */\n    async columns(): Promise<string[] | null> {\n        const res = await this.exec(mlrCmd, [`--icsv`, `--ojson`, `head`, `-n`, `1`, this.source])\n\n        const colExec = await this.promisifyProcessResult(res)\n\n        if (colExec.code !== 0) {\n            return null\n        }\n\n        if (colExec.stderr) {\n            throw new Error(colExec.stderr)\n        }\n        const columns = JSON.parse(colExec.stdout)\n\n        if (columns.length === 0) {\n            this.shape.header = false\n            return null\n        }\n\n        this.shape.columns = Object.keys(columns[0])\n        this.shape.header = true\n\n        return this.shape.columns\n    }\n\n    /**\n     * Extracts rows from the dataset for preview.\n     * If the dataset is too large to preview then it will stream the result\n     * @param {number} count - number of rows to preview\n     * @param {string} streamTo - path to the file to stream to\n     * @return Promise<string[][] | string> - preview rows or path to the file the preview was streamed to\n     */\n    async preview(count = 20, streamTo?: string): Promise<string[][] | string> {\n        let write: fs.WriteStream\n\n        const maxPreview = 1024 * 1024 * 10\n\n        const fsp = fs.promises\n        const stat = await fsp.stat(this.source)\n\n        if (streamTo && streamTo !== this.source && fs.createWriteStream(streamTo) instanceof fs.WriteStream || stat.size > maxPreview) {\n\n            if (streamTo === undefined) throw new Error('stream-destination-undefined')\n            write = fs.createWriteStream(streamTo)\n\n            const previewExec = await this.exec(mlrCmd, [`--icsv`, `--ojson`, `head`, `-n`, count.toString(), this.source])\n\n            previewExec.stdout.pipe(write)\n\n            console.warn(`\uD83D\uDC40 Preview saved to: ${streamTo}`)\n            return streamTo\n        }\n\n        const previewExec = await this.exec(mlrCmd, [`--icsv`, `--ojson`, `head`, `-n`, count.toString(), this.source])\n\n        const prev = await this.promisifyProcessResult(previewExec)\n\n        if (prev.stderr) {\n            throw new Error(prev.stderr)\n        }\n\n        if (prev.code !== 0) {\n            throw new Error(`Error while executing mlr command`)\n        }\n\n        this.shape.preview = JSON.parse(prev.stdout)\n\n        return this.shape.preview\n    }\n\n    async uploadToS3(): Promise<string> {\n        const fStream = fs.createReadStream(this.source)\n\n        if (!fStream.readable) {\n            throw new Error('failed-to-read-source: Make sure the provided file is readable')\n        }\n\n        const {data: uri, err} = parseS3Uri(this.destination, {\n            file: true,\n        });\n\n\n        if (err.toString().startsWith(`invalid-s3-uri`)) {\n            throw new Error(`failed-to-parse-s3-uri: ${err}`)\n        }\n\n        if (!uri.file) {\n            uri.file = path.basename(this.source)\n        }\n\n        console.log(`uploading ${this.source} to ${this.destination}`);\n\n        const s3 = s3Client({\n            region: \"us-east-2\",\n        })\n\n        const res = await s3.send(new PutObjectCommand({\n            Bucket: uri.bucket,\n            Key: uri.key + uri.file,\n            Body: fStream,\n        })).catch(err => {\n            throw new Error(`failed-upload-s3: Error while uploading to S3: ${err}`)\n        }).finally(() => {\n            fStream.close()\n        })\n        if (res.$metadata.httpStatusCode !== 200) {\n            throw new Error(`failed-upload-s3: Error while uploading to S3: ${res.$metadata.httpStatusCode}`)\n        }\n        if (!res.ETag) {\n            throw new Error(`failed-upload-s3: Error while uploading to S3: ${res.ETag}`)\n        }\n        console.log(`uploaded successfully`)\n        return res.ETag\n    }\n\n    async detectShape(): Promise<Shape> {\n        const path = this.source\n        const shape: Shape = {\n            type: '',\n            size: 0,\n            columns: [''],\n            header: false,\n            encoding: 'utf-8',\n            bom: false,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: ',',\n            errors: {},\n            warnings: {},\n            preview: [['']],\n        };\n\n        if (!fs.existsSync(path)) {\n            throw new Error(`path-doesnt-exists: ${path} ,provide a valid path to a CSV file`)\n        }\n\n        const stat = fs.statSync(path)\n\n        this.shape.size = stat.size\n\n        if (stat.size > 1024 * 1024 * 1024) {\n            throw new Error(`file-size-exceeds-limit: ${path} is too large, please limit to under 1GB for now`)\n        }\n\n        if (!fs.existsSync(path)) {\n            throw new Error(`${path} does not exist, provide a valid path to a CSV file`)\n        }\n\n        if (os.platform() === \"win32\") {\n            // TODO: handle\n            throw new Error(`scream`)\n        }\n\n        const mime = this.exec(\"file\", [path, \"--mime-type\"])\n\n        mime.stdout.on(\"data\", (data) => {\n            const type = data.toString().split(\":\")[1].trim();\n            console.log(type)\n\n            if (type === \"text/csv\" || type === \"text/plain\") {\n                this.shape.type = type;\n                return;\n            }\n            this.shape.errors[\"incorrectType\"] = `${path} is not a CSV file`;\n            throw new Error(`unsupported-file-type: ${path} is not a CSV file`)\n        });\n\n        mime.stderr.on(\"error\", (err) => {\n            console.warn(err);\n        });\n\n        mime.on(\"close\", (code) => {\n            if (code !== 0 || this.shape.type === \"\") {\n                console.warn(\"unable to use file()\");\n            }\n        });\n\n        const readLine = createInterface({\n            input: fs.createReadStream(path),\n            crlfDelay: Infinity,\n        });\n\n        let count = 0;\n        const max = 20;\n\n        // to store the column header if it exists for further checks\n        const first = {\n            row: [''],\n            del: \"\",\n        };\n\n        // hold the previous line while rl proceeds to next line using \\r\\n as a delimiter\n        let previous = \"\";\n\n        const delimiters = [\",\", \";\", \"\\t\", \"|\", \":\", \" \", \"|\"];\n\n        readLine.on(\"line\", (current) => {\n            if (count === 0) {\n                delimiters.forEach((d) => {\n                    if (current.split(d).length > 1) {\n                        first.row = current.split(d)\n                        first.del = d;\n                    }\n                });\n\n                if (first.del === \"\" || first.row.length <= 1) {\n                    shape.errors[\"unrecognizedDelimiter\"] = `${path} does not have a recognized delimiter`;\n                    shape.header = false;\n                }\n                const isDigit = /\\d+/;\n\n                // assuming that numbers shouldn't start as column header\n                // const hasDigitInHeader = first.row.some((el) => isDigit.test(el));\n                //\n                // if (hasDigitInHeader) {\n                //     shape.header = false;\n                //     shape.warnings[\"noHeader\"] = `no header found`;\n                //     count++;\n                //     return;\n                // }\n\n                shape.header = true;\n                shape.delimiter = first.del;\n                shape.columns = first.row;\n            }\n\n            if (count > 0 && count < max) {\n                // there is a chance the record spans next line\n                const inlineQuotes = current.split(`\"`).length - 1;\n\n                if (previous) {\n                    if (inlineQuotes % 2 !== 0) {\n                        // TODO: make sure previous + current\n                        // console.log(previous + l);\n                        shape.spanMultipleLines = true;\n                    }\n                }\n                // if odd number of quotes and consider escaped quotes such as: \"aaa\",\"b\"\"bb\",\"ccc\"\n                if (\n                    inlineQuotes % 2 !== 0 &&\n                    current.split(`\"\"`).length - 1 !== 1\n                ) {\n                    previous = current;\n                }\n\n                const width = current.split(first.del).length;\n\n                if (width !== first.row.length) {\n                    shape.errors['rowWidthMismatch'] = `row width mismatch`;\n                    return;\n                }\n                shape.preview.push(current.split(first.del));\n            }\n            count++;\n        });\n        return shape;\n    }\n\n    determineConnector(): connectorType {\n        const env = this.determineSource();\n        if (env === \"local\") {\n            const stream = fs.createReadStream(this.source);\n            return stream\n        }\n\n        if (env === \"aws\") {\n            const client = s3Client({\n                credentials: credentials(\"default\"),\n                region: \"us-east-2\",\n            });\n            return client\n        }\n        throw new Error(`unsupported-source for: ${this.source}`)\n    }\n\n    determineSource(): string {\n        if (\n            this.source.startsWith(\"/\") ||\n            this.source.startsWith(\"../\") ||\n            this.source.startsWith(\"./\")\n        ) {\n            return \"local\";\n        }\n\n        if (this.source.startsWith(\"s3://\")) {\n            return \"remote\";\n        }\n\n        throw new Error(`invalid-source-type: ${this.source}`);\n    }\n\n    fileSize(): number {\n        const max = 1024 * 1024 * 50\n\n        if (!fs.existsSync(this.source)) {\n            throw new Error(`path-doesnt-exists: ${this.source} ,provide a valid path to a CSV file`)\n        }\n\n        const stat = fs.statSync(this.source)\n\n        if (stat.size > max) {\n            throw new Error(`file-size-exceeds-limit: ${this.source} is too large, please limit to 50MB`)\n        }\n        return stat.size\n    }\n\n    /**\n     * Initiates a multipart upload and returns an upload ID\n     * @returns {string} uploadID\n     * @private\n     */\n    async initMultipartUpload(\n        bucket: string,\n        key: string\n    ): Promise<string> {\n\n        const client = s3Client({\n            credentials: credentials(\"default\"),\n            region: \"us-east-2\",\n        });\n\n        const command = new CreateMultipartUploadCommand({\n            Bucket: bucket,\n            ContentEncoding: \"utf8\",\n            ContentType: \"text/csv\",\n            Key: key,\n        });\n\n        const result = await client.send(command);\n\n        if (result.$metadata.httpStatusCode !== 200) {\n            throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${result.UploadId} with status code ${result.$metadata.httpStatusCode}`)\n        }\n\n        if (!result.UploadId) {\n            throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${result.UploadId}`)\n        }\n\n        return result.UploadId\n    }\n\n    exec(cmd: string, args: string[]): ChildProcessWithoutNullStreams {\n        console.log(`\uD83D\uDCDD executing: ${cmd} ${args.join(' ')}`)\n        return spawn(cmd, args)\n    }\n\n    promisifyProcessResult(child: ChildProcessWithoutNullStreams): Promise<ProcessResult> {\n        const result: ProcessResult = {\n            stdout: '',\n            stderr: '',\n            code: 0\n        }\n\n        return new Promise((resolve, reject) => {\n            child.stdout.on('data', (data) => {\n                result.stdout += data\n            })\n\n            child.stderr.on('data', (data) => {\n                result.stderr += data\n            })\n\n            child.on('close', (code) => {\n                result.code = code === 0 ? 0 : 1\n                resolve(result)\n            })\n\n            child.on('error', (err) => {\n                reject(err)\n            })\n        })\n    }\n}\n\n/**\n * Returns a new dataset\n * @param {string} source - Source of the dataset\n * @returns {Options} options - Options for the dataset\n */\nfunction createDataset(source: string, options: DatasetOptions): Dataset {\n    return new _Dataset(source, options);\n}\n\n\nconst cache = (function (): { getInstance: () => Cache } {\n    let cache: Cache;\n\n    function init() {\n        const cachePath = path.join(process.cwd(), '.muto-cache')\n\n        if (!fs.existsSync(cachePath)) {\n            console.log('creating cache file at', cachePath)\n            writeFileSync(cachePath, JSON.stringify({}))\n        } else {\n            console.log('loading cache from', cachePath)\n        }\n\n        return {\n            init: new Date(),\n            path: cachePath,\n            get: (key: string): Dataset | undefined => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n\n                if (cache[key].source !== key) {\n                    return undefined\n                }\n                return cache[key]\n            },\n            set: (key: string, value: Dataset): string | void => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n\n                if (cache[key]) {\n                    return\n                }\n\n                cache[key] = value\n                writeFileSync(cachePath, JSON.stringify(cache))\n                return key\n            },\n            has: (key: string): boolean => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n\n                if (cache[key]) {\n                    return true\n                }\n                return false\n            },\n            delete: (key: string) => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n\n                delete cache[key]\n\n                writeFileSync(cachePath, JSON.stringify(cache))\n            },\n            clear: () => {\n                writeFileSync(cachePath, JSON.stringify({}))\n            },\n            size: () => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n                return Object.keys(cache).length\n            },\n            keys: () => {\n                const file = readFileSync(cachePath)\n                const cache = JSON.parse(file.toString())\n                return Object.keys(cache)\n            }\n        }\n    }\n\n    return {\n        getInstance: () => {\n            if (!cache) {\n                cache = init()\n            }\n            return cache\n        }\n    }\n})()\n\nclass Workflow {\n    name: string;\n    datasets: Map<string, Dataset>;\n    readonly createdAt: Date;\n    env: env;\n    lcache: Cache\n\n    constructor(name: string) {\n        this.name = name;\n        this.datasets = new Map();\n        this.createdAt = new Date();\n        this.env = 'local';\n        this.lcache = cache.getInstance()\n    }\n\n    list(): Dataset[] {\n        return Array.from(this.datasets.values());\n    }\n\n    remove(dataset: Dataset) {\n        this.datasets.delete(dataset.source);\n    }\n\n    async add(source: string, options: DatasetOptions): Promise<string> {\n        if (options.destination === \"\") {\n            console.warn(`destination-not-provided: provide a destination for ${source}`);\n        }\n\n        if (this.lcache.has(source)) {\n            return source\n        }\n\n        const dataset = new _Dataset(source, options);\n\n        this.datasets.set(source, dataset);\n        return source\n    }\n}\n\n\n/**\n * Returns a new workflow\n * @param {string} name - Name of the workflow\n * @returns {Workflow} - New workflow\n */\nfunction createWorkflow(name: string): Workflow {\n    return new Workflow(name);\n}\n\n\nexport {\n    createDataset,\n    createWorkflow,\n}", "import {S3Client} from \"@aws-sdk/client-s3\";\nimport {join} from \"path\";\nimport fs from \"fs\";\n\nexport enum Delimiters {\n    COMMA = \",\",\n    SEMICOLON = \";\",\n    PIPE = \"|\",\n    COLON = \":\",\n    TAB = \"\\t\",\n    SPACE = \" \",\n    TILDE = \"~\",\n    DASH = \"-\",\n    UNDERSCORE = \"_\"\n}\n\nexport type env = 'local' | 'aws'\nexport type connectorType = S3Client | fs.ReadStream\nexport const mlrCmd = join(process.cwd(), 'node_modules', '.bin', 'mlr@v6.0.0')\n\n\n// TODO: better error message for errors in transform\nexport type datasetStateType = 'init' | 'transforming' | 'uploading' | 'cancelled' | 'uploaded' | 'ready'\nexport type ShapeErrType = 'unrecognizedDelimiter' | 'noHeader' | 'invalidFileType' | 'rowWidthMismatch'\n\n\nexport type Shape = {\n    type: string,\n    columns: Array<string>,\n    header: boolean,\n    encoding: string,\n    bom: boolean,\n    size: number,\n    spanMultipleLines: boolean,\n    quotes: boolean,\n    delimiter: string,\n    errors: { [key: string]: string }\n    warnings: { [key: string]: string },\n    preview: string[][],\n}\n\nexport interface Dataset {\n    source: string\n    destination: string\n    addedAt: Date;\n    options: DatasetOptions;\n    shape: Shape\n    cached: boolean\n    state: datasetStateType\n    connector: connectorType | null\n\n    detectShape(): Promise<Shape>\n\n    determineSource(): string\n\n    determineSource(): string\n\n    determineConnector(): connectorType\n\n    uploadToS3(): Promise<string>\n\n    initMultipartUpload(bucket: string, key: string): Promise<string>\n\n    toJson(): Promise<string>\n\n    rowCount(): Promise<number>\n\n    fileSize(): number\n\n    preview(count: number, streamTo?: string): Promise<string[][] | string>\n}\n\nexport type DatasetOptions = {\n    destination: string;\n    columns: Array<string>,\n    header: boolean,\n    quotes: boolean,\n    transform: (row: object) => object\n    delimiter: Delimiters\n}\n\nexport interface Cache {\n    path: string\n    init: Date\n\n    get(key: string): Dataset | undefined\n\n    set(key: string, value: Dataset): void\n\n    has(key: string): boolean\n\n    delete(key: string): void\n\n    clear(): void\n\n    size(): number\n\n    keys(): string[]\n}\n\nexport type ProcessResult = {\n    stdout: string,\n    stderr: string,\n    code: number\n}\n"],
  "mappings": "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",
  "names": []
}
