#!/usr/bin/env node
var g=(e,t,i)=>new Promise((s,o)=>{var m=r=>{try{n(i.next(r))}catch(d){o(d)}},a=r=>{try{n(i.throw(r))}catch(d){o(d)}},n=r=>r.done?s(r.value):Promise.resolve(r.value).then(m,a);n((i=i.apply(e,t)).next())});import I from"arg";import x,{join as E}from"path";import v from"os";import C from"fs";import{exec as _}from"child_process";import b from"util";import{exec as O}from"child_process";import{parse as q}from"pgsql-parser";import{join as R}from"path";import{createWriteStream as j}from"fs";var f=(e,t,i)=>new Promise((s,o)=>{var m=r=>{try{n(i.next(r))}catch(d){o(d)}},a=r=>{try{n(i.throw(r))}catch(d){o(d)}},n=r=>r.done?s(r.value):Promise.resolve(r.value).then(m,a);n((i=i.apply(e,t)).next())}),h=b.promisify(_),w=E(process.cwd(),"node_modules",".bin","mlr@v6.0.0"),S=class{constructor(e){this.name=e.name!==""?e.name:x.basename(e.source),this.options=e,this.createdAt=new Date,this.metadata={type:"",columns:[],header:!1,extension:"",size:0,rowCount:0,spanMultipleLines:!1,quotes:!1,delimiter:",",errors:{},warnings:{}}}rowCount(){return f(this,null,function*(){let e=yield h(`${w} --ojson count ${this.options.source}`);if(e.stderr!=="")throw new Error(`failed-to-get-row-count: ${e.stderr}`);let t=JSON.parse(e.stdout);if(t.length===0)throw new Error("failed-to-get-row-count: no rows found");if(t[0].count===void 0)throw new Error("failed-to-get-row-count: no count found");this.metadata.rowCount=t[0].count})}columnHeader(){return f(this,null,function*(){let e=yield h(`${w} --icsv --ojson head -n 1 ${this.options.source}`);if(e.stderr!=="")throw new Error(`failed-to-get-header-column: ${e.stderr}`);let t=JSON.parse(e.stdout);if(t.length===0)throw new Error("failed-to-get-header-column: no columns found");this.metadata.columns=this.sanitizeColumnNames(Object.keys(t[0]))})}sanitizeColumnNames(e){return e.map(t=>t.replace(/[^a-zA-Z0-9]/g,"_"))}fileType(){return f(this,null,function*(){if(v.platform()!=="linux"&&v.platform()!=="darwin")throw new Error("unsupported-platform");let e=yield h(`file ${this.options.source} --mime-type`);if(e.stderr!=="")throw new Error(`failed-to-detect-mime-type: ${e.stderr}`);let t=e.stdout.split(":")[1].trim();if(t==="")throw new Error("failed-to-detect-mime-type");this.options.source.endsWith(".csv")&&(this.metadata.extension="csv"),this.options.source.endsWith(".json")&&(this.metadata.extension="json"),this.metadata.type=t})}fileSize(){return f(this,null,function*(){let e=yield C.promises.stat(this.options.source);this.metadata.size=e.size})}};function $(e,t){return f(this,null,function*(){return yield new Promise((i,s)=>{t===void 0&&s(new Error("missing-catalog-options")),(t.source===void 0||t.source==="")&&s(new Error("failed-to-create-catalog: no source provided")),(t.destination===void 0||t.destination==="")&&s(new Error("failed-to-create-catalog: no destination provided")),(t.name===void 0||t.name==="")&&s(new Error("failed-to-create-catalog: no name provided")),t.input==="csv"&&!t.source.endsWith(".csv")&&s(new Error("failed-to-create-catalog: file extension does not match input type")),t.input==="json"&&!t.source.endsWith(".json")&&s(new Error("failed-to-create-catalog: file extension does not match input type"));let o=new S(t);Promise.all([o.columnHeader(),o.fileSize(),o.fileType(),o.rowCount()]).then(()=>{console.log(`created catalog for: ${t.name}`),i(o)}).catch(m=>s(m))})})}var A=class{constructor(){this.query="",this.stmt={type:"",distinct:!1,columns:[{name:"",type:""}],from:[{schemaname:"",relname:"",inh:""}],sort:{},where:{},group:[],having:[],orderBy:[],limit:{type:"",val:""}}}parse(e){var t,i;if(e.trim()==="")throw new Error("invalid-query: no query found");console.log(`raw: ${e}`);let s=q(e);Object.keys(s[0].RawStmt.stmt)[0]==="SelectStmt"&&(this.stmt.type="select");let o=s[0].RawStmt.stmt.SelectStmt,m=o.limitOption;if(m==="LIMIT_OPTION_DEFAULT"&&(this.stmt.limit={type:o.limitOption,val:""}),m==="LIMIT_OPTION_COUNT"&&o.limitCount!==""&&(this.stmt.limit={type:o.limitOption,val:o.limitCount.A_Const.val.Integer.ival}),o.distinctClause!==void 0&&(this.stmt.distinct=!0),o.targetList!==void 0&&(this.stmt.columns=o.targetList.map(a=>{let n=a.ResTarget.val.ColumnRef.fields[0];return n.A_Star!==void 0?{name:"*"}:{name:n.String.str}})),o.fromClause!==void 0&&(this.stmt.from=o.fromClause.map(a=>{let n={schemaname:"",relname:"",inh:""},r=a.RangeVar;return r.schemaname!==void 0&&(n.schemaname=r.schemaname),r.relname!==void 0&&(n.relname=r.relname),r.inh!==void 0&&(n.inh=r.inh),n})),o.whereClause!==void 0){if(o.whereClause!==null&&((t=o==null?void 0:o.whereClause)==null?void 0:t.A_Expr.kind)==="AEXPR_OP"){let a=o.whereClause.A_Expr,n={operator:"",left:{},right:{}};n.operator=a.name[0].String.str,a.lexpr!==void 0&&(n.left=a.lexpr.ColumnRef.fields[0].String.str),a.rexpr!==void 0&&(a.rexpr.ColumnRef!==void 0&&Object.keys(a.rexpr.ColumnRef.fields[0]).includes("String")&&(n.right=a.rexpr.ColumnRef.fields[0].String.str),a.rexpr.A_Const!==void 0&&(n.right=a.rexpr.A_Const.val.Integer.ival)),this.stmt.where=n}o.whereClause.A_Expr!==void 0&&((i=o==null?void 0:o.whereClause)==null?void 0:i.A_Expr.kind)==="AEXPR_IN",o.whereClause.BoolExpr!==void 0&&(o.whereClause.BoolExpr.boolop==="AND_EXPR",o.whereClause.BoolExpr.boolop==="OR_EXPR")}return this.stmt}};function P(e){return new A().parse(e)}var z=R(process.cwd(),"node_modules",".bin","mlr@v6.0.0");function y(e,t){return f(this,null,function*(){let i=yield $(e,t);if(i==null)throw new Error("failed-to-create-catalog");let s=new N(i,P(e)).analyze();console.log(JSON.stringify(i,null,2));let{stdout:o}=O(s.cmd+" "+s.args.join(" "),{maxBuffer:1024*1024*1024});if(o===null)throw new Error("failed-to-execute-query");o.on("close",()=>{console.log("done")}),o.pipe(j(i.options.destination))})}var N=class{constructor(e,t){this.stmt=t,this.catalog=e,this.plan={cmd:"",args:[]}}analyze(){if(console.log("analyzing query"),this.plan.cmd=z,this.stmt.type!=="select")throw new Error("not-implemented: only select queries are supported at this time");if(this.stmt.from.length===1){let e=this.stmt.from[0].relname;console.log("from table: ",e);let t=this.catalog.options.source,i=this.catalog.options.destination;if(console.log("destination: ",i),this.stmt.columns.length===1){if(this.stmt.columns[0].name==="*")return this.plan.args=["--icsv","--ojson","cat",t],this.plan;this.plan.args=["--icsv","--ojson","cut","-f",this.stmt.columns[0].name,t]}if(this.stmt.columns.length>1){let s=this.stmt.columns.map(o=>o.name).join(",");return console.log("fields: ",s),this.plan.args=["--icsv","--ojson","cut","-o","-f",s,t],this.plan}}return this.plan}};import l from"picocolors";import p from"picocolors";var T=`
${l.bold("Usage:")}
    muto [command] [arg] [flags]

${l.bold("Commands:")}
    query   Query data using SQL

${l.bold("Flags:")}
    -s    --source        Path to the source file ${l.bold("(required)")}
    -d    --destination   Destination of the processed file ${l.bold("(required)")}

    -i    --input         Input format ${l.bold("default: csv")} (csv, json, xml, etc.) 
    -o    --output        Output format ${l.bold("default: csv")}

    -n    --name          Name of the query ${l.bold("default: file name")}

    -v    --version       Print version
    -h    --help          Print help (what you are reading now)
  
${l.bold("Example:")} 
    muto query "select id, track from albums" -s /path/to/file.csv -d ./result.json
`,u=I({"--help":Boolean,"--version":Boolean,"--source":String,"--destination":String,"--input":String,"--output":String,"--name":String,"-h":"--help","-v":"--version","-s":"--source","-d":"--destination","-i":"--input","-o":"--output","-n":"--name"});function M(){return g(this,null,function*(){u["--help"]&&(c(T),process.exit(0)),u["--version"]&&(c("v1.0.0"),process.exit(0)),u._.length===0&&(c(p.red(`Error: Missing command, see ${l.bold("muto --help")}`)),process.exit(0)),u._.length!==2&&(c(p.red(`Error: Missing command argument, see ${l.bold("muto --help")}`)),process.exit(0)),u._[0]!=="query"&&(c(p.red(`Error: Unknown command, see ${l.bold("muto --help")}`)),process.exit(0)),u["--source"]||(c(p.red(`Error: Missing source, see ${l.bold("muto --help")}`)),process.exit(0)),u["--destination"]||(c(p.red(`Error: Missing destination, see ${l.bold("muto --help")}`)),process.exit(0));let e={input:u["--input"]||"csv",output:u["--output"]||"csv",name:u["--name"]||"first_query",source:u["--source"],destination:u["--destination"]};u._[1]===""&&(c(p.red(`Error: Missing query, see ${l.bold("muto --help")}`)),process.exit(1)),yield y(u._[1],e),process.exit(0)})}M().catch(console.error);function c(e){typeof e=="string"?process.stdout.write(`${e} 
`):process.stdout.write(`${JSON.stringify(e,null,2)} 
`)}process.on("unhandledRejection",(e,t)=>{c(e),process.exit(1)});
