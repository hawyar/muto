#!/usr/bin/env node
var h=(t,e,n)=>new Promise((s,o)=>{var u=i=>{try{r(n.next(i))}catch(d){o(d)}},a=i=>{try{r(n.throw(i))}catch(d){o(d)}},r=i=>i.done?s(i.value):Promise.resolve(i.value).then(u,a);r((n=n.apply(t,e)).next())});import T from"arg";import x,{join as C}from"path";import v from"os";import E from"fs";import{exec as _}from"child_process";import S from"util";import{exec as O}from"child_process";import{parse as q}from"pgsql-parser";import{join as R}from"path";import{createWriteStream as P}from"fs";var f=(t,e,n)=>new Promise((s,o)=>{var u=i=>{try{r(n.next(i))}catch(d){o(d)}},a=i=>{try{r(n.throw(i))}catch(d){o(d)}},r=i=>i.done?s(i.value):Promise.resolve(i.value).then(u,a);r((n=n.apply(t,e)).next())}),p=S.promisify(_),g=C(process.cwd(),"node_modules",".bin","mlr@v6.0.0"),$=class{constructor(t){this.name=t.name!==""?t.name:x.basename(t.source),this.options=t,this.createdAt=new Date,this.metadata={type:"",columns:[],header:!1,extension:"",size:0,rowCount:0,spanMultipleLines:!1,quotes:!1,delimiter:",",errors:{},warnings:{}}}rowCount(){return f(this,null,function*(){let t=yield p(`${g} --ojson count ${this.options.source}`);if(t.stderr!=="")throw new Error(`failed-to-get-row-count: ${t.stderr}`);let e=JSON.parse(t.stdout);if(e.length===0)throw new Error("failed-to-get-row-count: no rows found");if(e[0].count===void 0)throw new Error("failed-to-get-row-count: no count found");this.metadata.rowCount=e[0].count})}headerColumn(){return f(this,null,function*(){let t=yield p(`${g} --icsv --ojson head -n 1 ${this.options.source}`);if(t.stderr!=="")throw new Error(`failed-to-get-header-column: ${t.stderr}`);let e=JSON.parse(t.stdout);if(e.length===0)throw new Error("failed-to-get-header-column: no columns found");this.metadata.columns=Object.keys(e[0])})}fileType(){return f(this,null,function*(){if(v.platform()!=="linux"&&v.platform()!=="darwin")throw new Error("unsupported-platform");let t=yield p(`file ${this.options.source} --mime-type`);if(t.stderr!=="")throw new Error(`failed-to-detect-mime-type: ${t.stderr}`);let e=t.stdout.split(":")[1].trim();if(e==="")throw new Error("failed-to-detect-mime-type");this.options.source.endsWith(".csv")&&(this.metadata.extension="csv"),this.options.source.endsWith(".json")&&(this.metadata.extension="json"),this.metadata.type=e})}fileSize(){return f(this,null,function*(){let t=yield E.promises.stat(this.options.source);this.metadata.size=t.size})}};function b(t,e){return f(this,null,function*(){return yield new Promise((n,s)=>{(e.source===""||e.source===void 0)&&s(new Error("failed-to-create-catalog: no source provided")),(e.destination===""||e.destination===void 0)&&s(new Error("failed-to-create-catalog: no destination provided")),(e.name===""||e.name===void 0)&&s(new Error("failed-to-create-catalog: no name provided")),e.input==="csv"&&!e.source.endsWith(".csv")&&s(new Error("failed-to-create-catalog: file extension does not match input type")),e.input==="json"&&!e.source.endsWith(".json")&&s(new Error("failed-to-create-catalog: file extension does not match input type"));let o=new $(e);Promise.all([o.headerColumn(),o.fileSize(),o.fileType(),o.rowCount()]).then(()=>{console.log(`created catalog for: ${e.name}`),n(o)}).catch(u=>s(u))})})}var j=class{constructor(){this.query="",this.stmt={type:"",distinct:!1,columns:[{name:"",type:""}],from:[{schemaname:"",relname:"",inh:""}],sort:{},where:{},group:[],having:[],orderBy:[],limit:{type:"",val:""}}}parse(t){var e,n;if(t.trim()==="")throw new Error("invalid-query: no query found");console.log(`raw: ${t}`);let s=q(t);Object.keys(s[0].RawStmt.stmt)[0]==="SelectStmt"&&(this.stmt.type="select");let o=s[0].RawStmt.stmt.SelectStmt,u=o.limitOption;if(u==="LIMIT_OPTION_DEFAULT"&&(this.stmt.limit={type:o.limitOption,val:""}),u==="LIMIT_OPTION_COUNT"&&o.limitCount!==""&&(this.stmt.limit={type:o.limitOption,val:o.limitCount.A_Const.val.Integer.ival}),o.distinctClause!==void 0&&(this.stmt.distinct=!0),o.targetList!==void 0&&(this.stmt.columns=o.targetList.map(a=>{let r=a.ResTarget.val.ColumnRef.fields[0];return r.A_Star!==void 0?{name:"*"}:{name:r.String.str}})),o.fromClause!==void 0&&(this.stmt.from=o.fromClause.map(a=>{let r={schemaname:"",relname:"",inh:""},i=a.RangeVar;return i.schemaname!==void 0&&(r.schemaname=i.schemaname),i.relname!==void 0&&(r.relname=i.relname),i.inh!==void 0&&(r.inh=i.inh),r})),o.whereClause!==void 0){if(o.whereClause!==null&&((e=o==null?void 0:o.whereClause)==null?void 0:e.A_Expr.kind)==="AEXPR_OP"){let a=o.whereClause.A_Expr,r={operator:"",left:{},right:{}};r.operator=a.name[0].String.str,a.lexpr!==void 0&&(r.left=a.lexpr.ColumnRef.fields[0].String.str),a.rexpr!==void 0&&(a.rexpr.ColumnRef!==void 0&&Object.keys(a.rexpr.ColumnRef.fields[0]).includes("String")&&(r.right=a.rexpr.ColumnRef.fields[0].String.str),a.rexpr.A_Const!==void 0&&(r.right=a.rexpr.A_Const.val.Integer.ival)),this.stmt.where=r}o.whereClause.A_Expr!==void 0&&((n=o==null?void 0:o.whereClause)==null?void 0:n.A_Expr.kind)==="AEXPR_IN",o.whereClause.BoolExpr!==void 0&&(o.whereClause.BoolExpr.boolop==="AND_EXPR",o.whereClause.BoolExpr.boolop==="OR_EXPR")}return this.stmt}};function A(t){return new j().parse(t)}var I=R(process.cwd(),"node_modules",".bin","mlr@v6.0.0");function w(t,e){return f(this,null,function*(){let n=yield b(t,e);if(n==null)throw new Error("failed-to-create-catalog");let s=new N(n,A(t)).analyze();console.log(JSON.stringify(n,null,2));let{stdout:o}=O(s.cmd+" "+s.args.join(" "));if(o===null)throw new Error("failed-to-execute-query");o.pipe(P(n.options.destination)),console.log(s)})}var N=class{constructor(t,e){this.stmt=e,this.catalog=t,this.plan={cmd:"",args:[]}}analyze(){if(console.log("analyzing query"),this.plan.cmd=I,this.stmt.type!=="select")throw new Error("not-implemented: only select queries are supported at this time");if(this.stmt.from.length===1){let t=this.stmt.from[0].relname;console.log("from table: ",t);let e=this.catalog.options.source,n=this.catalog.options.destination;if(console.log("destination: ",n),this.stmt.columns.length===1){if(this.stmt.columns[0].name==="*")return this.plan.args=["--icsv","--ojson","cat",e],this.plan;this.plan.args=["--icsv","--ojson","cut","-f",this.stmt.columns[0].name,e]}if(this.stmt.columns.length>1){let s=this.stmt.columns.map(o=>o.name).join(",");return console.log("fields: ",s),this.plan.args=["--icsv","--ojson","cut","-o","-f",s,e],this.plan}}return this.plan}};import m from"picocolors";import z from"picocolors";var y=`
${m.bold("Usage:")}:
    muto [command] [arg] [flags]

${m.bold("Commands:")}: 
    query   Query data using SQL

    Flags:
      -s    --source        Path to the source file ${m.bold("required")}
      -d    --destination   Destination of the processed file ${m.bold("required")}
      -i    --input         Input format ${m.bold("defaults: csv")} (csv, json, xml, etc.) 
      -o    --output        Output format ${m.bold("defaults: csv")} (csv, json, xml, etc.)
      -n    --name          Name of the query ${m.bold("defaults: name of the source file")}
      -v    --version       Print version
`,l=T({"--help":Boolean,"--version":Boolean,"--source":String,"--destination":String,"--input":String,"--output":String,"--name":String,"-h":"--help","-v":"--version","-s":"--source","-d":"--destination","-i":"--input","-o":"--output","-n":"--name"});function M(){return h(this,null,function*(){l["--help"]&&(c(y),process.exit(0)),l["--version"]&&(c("v1.0.0"),process.exit(0)),l._.length===0&&(c(z.red(`Error: Missing command, see ${m.bold("muto --help")}`)),process.exit(1)),l._.length!==2&&(c(`Missing command ${y}`),process.exit(1)),l._[0]!=="query"&&c("Invalid command"),l["--source"]||(c("Missing source"),process.exit(1)),l["--destination"]||(c("Missing destination"),process.exit(1));let t={input:l["--input"]||"csv",output:l["--output"]||"csv",name:l["--name"]||"first_query",source:l["--source"],destination:l["--destination"]};l._[1]===""&&(c("Missing query"),process.exit(1)),yield w(l._[1],t),process.exit(0)})}function c(t){typeof t=="string"?process.stdout.write(`${t} 
`):process.stdout.write(`${JSON.stringify(t,null,2)}
`)}M().catch(console.error);process.on("unhandledRejection",(t,e)=>{c(t),process.exit(1)});
