#!/usr/bin/env node
var w=(t,e,r)=>new Promise((s,i)=>{var d=o=>{try{l(r.next(o))}catch(u){i(u)}},p=o=>{try{l(r.throw(o))}catch(u){i(u)}},l=o=>o.done?s(o.value):Promise.resolve(o.value).then(d,p);l((r=r.apply(t,e)).next())});import A from"arg";import C,{join as S}from"path";import v from"os";import m from"fs";import{exec as _}from"child_process";import{fromIni as O}from"@aws-sdk/credential-providers";import{S3Client as $}from"@aws-sdk/client-s3";import R from"util";import{parse as J}from"pgsql-parser";var c=(t,e,r)=>new Promise((s,i)=>{var d=o=>{try{l(r.next(o))}catch(u){i(u)}},p=o=>{try{l(r.throw(o))}catch(u){i(u)}},l=o=>o.done?s(o.value):Promise.resolve(o.value).then(d,p);l((r=r.apply(t,e)).next())}),g=t=>O({profile:t,mfaCodeProvider:e=>c(void 0,null,function*(){return e})});function y(t){return new $(t)}var h=R.promisify(_),x=S(process.cwd(),"node_modules",".bin","mlr@v6.0.0"),P=class{constructor(t){this.name=t.name!==""?t.name:C.basename(t.source),this.options=t,this.env="local",this.createdAt=new Date,this.state="init",this.connector=null,this.loader=null,this.metadata={type:"",columns:[],header:!1,extension:"",size:0,rowCount:0,spanMultipleLines:!1,quotes:!1,delimiter:",",errors:{},warnings:{}}}rowCount(){return c(this,null,function*(){let t=yield h(`${x} --ojson count ${this.options.source}`);if(t.stderr!=="")throw new Error(`failed-to-get-row-count: ${t.stderr}`);let e=JSON.parse(t.stdout);if(e.length===0)throw new Error("failed-to-get-row-count: no rows found");if(e[0].count===void 0)throw new Error("failed-to-get-row-count: no count found");this.metadata.rowCount=e[0].count})}headerColumn(){return c(this,null,function*(){let t=yield h(`${x} --icsv --ojson head -n 1 ${this.options.source}`);if(t.stderr!=="")throw new Error(`failed-to-get-header-column: ${t.stderr}`);console.log(t);let e=JSON.parse(t.stdout);if(e.length===0)throw new Error("failed-to-get-header-column: no columns found");this.metadata.columns=Object.keys(e[0])})}fileType(){return c(this,null,function*(){if(v.platform()!=="linux"&&v.platform()!=="darwin")throw new Error("unsupported-platform");let t=yield h(`file ${this.options.source} --mime-type`);if(t.stderr!=="")throw new Error(`failed-to-detect-mime-type: ${t.stderr}`);let e=t.stdout.split(":")[1].trim();if(e==="")throw new Error("failed-to-detect-mime-type");this.options.source.endsWith(".csv")&&(this.metadata.extension="csv"),this.options.source.endsWith(".json")&&(this.metadata.extension="json"),this.metadata.type=e})}fileSize(){return c(this,null,function*(){let t=yield m.promises.stat(this.options.source);this.metadata.size=t.size})}determineLoader(){if(this.options.destination.startsWith("s3://")){this.loader=y({credentials:g("default"),region:"us-east-2"});return}if(this.options.source.startsWith("/")||this.options.source.startsWith("../")||this.options.source.startsWith("./")){this.loader=m.createWriteStream(this.options.destination);return}throw new Error("unsupported-loader")}determineConnector(){if(this.options.source.startsWith("/")||this.options.source.startsWith("../")||this.options.source.startsWith("./")){if(!m.existsSync(this.options.source))throw new Error(`file: ${this.options.source} not found, please provide a valid file path`);this.connector=m.createReadStream(this.options.source);return}if(this.options.source.startsWith("s3://")){this.connector=y({credentials:g("default"),region:"us-east-2"});return}throw new Error(`unsupported-source for: ${this.options.source}`)}};function W(t,e){return c(this,null,function*(){return yield new Promise((r,s)=>{(e.source===""||e.source===void 0)&&s(new Error("failed-to-create-catalog: no source provided")),(e.destination===""||e.destination===void 0)&&s(new Error("failed-to-create-catalog: no destination provided")),(e.name===""||e.name===void 0)&&s(new Error("failed-to-create-catalog: no name provided")),e.input==="csv"&&!e.source.endsWith(".csv")&&s(new Error("failed-to-create-catalog: file extension does not match input type")),e.input==="json"&&!e.source.endsWith(".json")&&s(new Error("failed-to-create-catalog: file extension does not match input type"));let i=new P(e);Promise.all([i.determineLoader(),i.determineConnector(),i.headerColumn(),i.fileSize(),i.fileType(),i.rowCount()]).then(()=>{console.log(`created catalog for: ${e.name}`),r(i)}).catch(d=>s(d))})})}function E(t,e){return c(this,null,function*(){let r=yield W(t,e);console.log(r)})}var f=`
Usage: 

muto [command] [arg] [flags]

commands:
  query    Query data using SQL

flags:
  -v    --version       Print version
  -s    --source        Source path
  -d    --destination   Destination path
  -i    --input         Input format
  -o    --output        Output format
  -n    --name          Name of the query
`,n=A({"--help":Boolean,"--version":Boolean,"--source":String,"--destination":String,"--input":String,"--output":String,"--name":String,"-h":"--help","-v":"--version","-s":"--source","-d":"--destination","-i":"--input","-o":"--output","-n":"--name"});function I(){return w(this,null,function*(){n["--help"]&&(a(f),process.exit(0)),n["--version"]&&(a("v1.0.0"),process.exit(0)),n._.length===0&&(a(`Missing command 
${f}`),process.exit(1)),n._.length!==2&&(a(`Missing command ${f}`),process.exit(1)),n._[0]!=="query"&&a("Invalid command"),n["--source"]||(a("Missing source"),process.exit(1)),n["--destination"]||(a("Missing destination"),process.exit(1));let t={input:n["--input"]||"csv",output:n["--output"]||"csv",name:n["--name"]||"first_query",source:n["--source"],destination:n["--destination"]};yield E(n._[1],t),process.exit(0)})}function a(t){typeof t=="string"?process.stdout.write(`${t} 
`):process.stdout.write(`${JSON.stringify(t,null,2)}
`)}I().catch(console.error);process.on("unhandledRejection",(t,e)=>{a(t),process.exit(1)});
