{"mappings":"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","sources":["lib/index.ts","lib/engine.ts"],"sourcesContent":["export {createWorkflow} from \"./engine\"\n","import * as fs from \"fs\";\nimport * as os from \"os\";\nimport {createInterface} from \"readline\"\nimport {spawn} from \"child_process\";\nimport {fromIni} from \"@aws-sdk/credential-providers\"\nimport {\n    S3Client,\n    GetObjectCommand,\n    S3ClientConfig,\n    CreateMultipartUploadCommand\n} from \"@aws-sdk/client-s3\";\n\ntype ShapeErrType = 'unrecognizedDelimiter' | 'noHeader' | 'invalidFileType' | 'rowWidthMismatch'\n\ntype supportedDelimiters = \",\" | \";\" | \"|\" | \":\" | \"\\t\" | \" \" | \"^\" | \"~\" | \"*\" | \"!\" | \"-\" | \"_\" | \"|\"\ntype env = 'local' | 'aws'\ntype connectorType = S3Client | fs.ReadStream\n\n// Shape of a dataset object\ninterface Shape {\n    type: string,\n    columns: Array<string>,\n    header: boolean,\n    encoding: string,\n    bom: boolean,\n    spanMultipleLines: boolean,\n    quotes: boolean,\n    delimiter: string,\n    errors: { [key: string]: string }\n    warnings: { [key: string]: string },\n    preview: string[][],\n}\n\n// Dataset represents a file from a supported a data source\ninterface Dataset {\n    source: string\n    options: Options;\n    shape?: Shape\n    data?: string[][];\n    createdAt: Date;\n    connector: connectorType;\n}\n\n// Options for a dataset\ninterface Options {\n    destination: string;\n    columns: Array<string>,\n    header: boolean,\n    bom: boolean,\n    delimiter: supportedDelimiters\n}\n\n\nconst credentials = (profile: string) => fromIni({\n    profile: profile,\n    mfaCodeProvider: async (mfaSerial) => {\n        return mfaSerial\n    },\n});\n\n\n// Represents a workflow with a list of datasets in a local or cloud env\nclass Workflow {\n    name: string;\n    datasets: Map<string, Dataset>;\n    readonly createdAt: Date;\n    env: env;\n\n    constructor(name: string) {\n        this.name = name;\n        this.datasets = new Map();\n        this.createdAt = new Date();\n        this.env = 'local';\n    }\n\n    /**\n     * List datasets in the workflow\n     * @param options\n     * @returns\n     */\n    list(): Dataset[] {\n        return Array.from(this.datasets.values());\n    }\n\n    /**\n     * Removes dataset from the workflow\n     * @param source\n     * @param options\n     */\n    remove(dataset: Dataset) {\n        this.datasets.delete(dataset.source);\n    }\n\n    /**\n     * Adds a dataset to workflow\n     * @param source\n     * @param options\n     * @returns\n     */\n    add(source: string, opt: Options): Promise<Dataset | Error> {\n        return new Promise((resolve, reject) => {\n\n            if (this.datasets.has(source)) {\n                reject(new Error(`Dataset ${opt.destination} already exists in the workflow`).message);\n            }\n\n            if (opt.destination === \"\") {\n                console.warn(`Dataset ${source} does not have a destination`);\n            }\n\n            if (opt.destination && opt.destination.startsWith(\"s3://\")) {\n                const exists = this.#existsInS3(source);\n\n                if (exists) {\n                    const conn = this.#s3Connector({\n                        credentials: credentials(\"default\"),\n                        region: \"us-east-2\",\n                    });\n                    const dataset = this.#newDataset(source, opt, conn);\n                    this.datasets.set(source, dataset);\n                    resolve(dataset);\n                }\n                // push new dataset to the workflow\n                reject(new Error(`Dataset ${source} does not exist in S3`));\n            }\n\n            if (\n                source.startsWith(\"/\") ||\n                source.startsWith(\"../\") ||\n                source.startsWith(\"./\")\n            ) {\n                if (!source.endsWith(\".csv\")) {\n                    reject(new Error(`${source} is not a CSV file`));\n                }\n\n                const dataset = this.#newDataset(source, opt, this.#fsConnector(source));\n                this.datasets.set(source, dataset);\n                resolve(dataset);\n            }\n            reject(new Error(`Invalid source ${source} type`));\n        });\n    }\n\n    /**\n     * Creates new dataset, a connector must be provided\n     * @param source\n     * @param options\n     */\n    #newDataset(source: string, options: Options, connector: connectorType): Dataset {\n        return {\n            source,\n            options,\n            createdAt: new Date(),\n            connector,\n        }\n    }\n\n    /**\n     * Checks if a file exists in a S3 bucket\n     * @param source\n     * @param options\n     * @returns\n     */\n    #existsInS3(source: string): boolean {\n        const {data, err} = this.#parseS3URI(source, {\n            file: true,\n        });\n\n        if (err || !data.file) {\n            console.error(`Invalid S3 URI: ${source}, URI must point to a file`);\n            return false;\n        }\n\n\n        const conn = this.#s3Connector({\n            credentials: credentials(\"default\"),\n            region: \"us-east-2\",\n        });\n\n        const getObjectCommand = new GetObjectCommand({\n            Bucket: data.bucket,\n            Key: data.file,\n        });\n\n        conn.send(getObjectCommand).then((res) => {\n                if (res.$metadata.httpStatusCode === 200 && res.ContentType === \"text/csv\") {\n                    return true\n                }\n                return false\n            }\n        ).catch((err) => {\n            console.error(err);\n            return false;\n        });\n        return false\n    }\n\n    /**\n     * Connects to given path directory in the filesystem\n     * @param path\n     * @returns {fs.Dirent[]}\n     */\n    #fsConnector(path: string): fs.ReadStream {\n        return fs.createReadStream(path);\n    }\n\n    /**\n     * Creates a new S3 client\n     * @param opt - S3 client config\n     * @returns S3Client\n     */\n    #s3Connector(opt: S3ClientConfig): S3Client {\n        if (!opt.region) {\n            opt.region = 'us-east-2';\n        }\n        return new S3Client(opt);\n    }\n\n    // Early on we check the csv file for some attributes to determine the shape of the data\n    #detectShape(d: Dataset): Shape {\n        const shape: Shape = {\n            type: '',\n            columns: [''],\n            header: false,\n            encoding: 'utf-8',\n            bom: false,\n            spanMultipleLines: false,\n            quotes: false,\n            delimiter: ',',\n            errors: {},\n            warnings: {},\n            preview: [['']],\n        };\n\n        if (!fs.existsSync(d.source)) {\n            throw new Error(`${d.source} does not exist, provide a valid path to a CSV file`)\n        }\n\n        if (os.platform() === \"win32\") {\n            console.error(`handle windows later`)\n            return shape;\n        }\n\n        const mime = spawn(\"file\", [d.source, \"--mime-type\"])\n\n        mime.stdout.on(\"data\", (data) => {\n            const type = data.toString().split(\":\")[1].trim();\n\n            if (type === \"text/csv\" || type === \"text/plain\") {\n                shape.type = type;\n            } else {\n                shape.errors[\"incorrectType\"] = `${d.source} is not a CSV file`;\n            }\n        });\n\n        mime.on(\"close\", (code) => {\n            if (code !== 0 || shape.type === \"\") {\n                console.warn(\"unable to use file() cmd\");\n            }\n        });\n\n        const readLine = createInterface({\n            input: fs.createReadStream(d.source),\n            crlfDelay: Infinity,\n        });\n\n        let count = 0;\n        const max = 20;\n\n        // to store the column header if it exists for further checks\n        const first = {\n            row: [''],\n            del: \"\",\n        };\n\n        // hold the previous line while rl proceeds to next line using \\r\\n as a delimiter\n        let previous = \"\";\n\n        // create an array of delimiter from supported delimiter\n        const delimiters = [\",\", \";\", \"\\t\", \"|\", \":\", \" \", \"|\"];\n\n        readLine.on(\"line\", (current) => {\n\n            if (count === 0) {\n                delimiters.forEach((d) => {\n                    if (current.split(d).length > 1) {\n                        first.row = current.split(d)\n                        first.del = d;\n                    }\n                });\n\n                if (first.del === \"\" || first.row.length <= 1) {\n                    shape.errors[\"unrecognizedDelimiter\"] = `${d.source} does not have a recognized delimiter`;\n                    shape.header = false;\n                }\n\n                const isDigit = /\\d+/;\n\n                // betting on numbers should not appear as header values\n                const hasDigitInHeader = first.row.some((el) => isDigit.test(el));\n\n                if (hasDigitInHeader) {\n                    shape.header = false;\n                    shape.warnings[\"noHeader\"] = `no header found`;\n                    count++;\n                    return;\n                }\n\n                shape.header = true;\n                shape.delimiter = first.del;\n                shape.columns = first.row;\n            }\n\n            if (count > 0 && count < max) {\n                // there is a chance the record spans next line\n                const inlineQuotes = current.split(`\"`).length - 1;\n\n                if (previous) {\n                    if (inlineQuotes % 2 !== 0) {\n                        // TODO: make sure previous + current\n                        // console.log(previous + l);\n                        shape.spanMultipleLines = true;\n                    }\n                }\n                // if odd number of quotes and consider escaped quotes such as: \"aaa\",\"b\"\"bb\",\"ccc\"\n                if (\n                    inlineQuotes % 2 !== 0 &&\n                    current.split(`\"\"`).length - 1 !== 1\n                ) {\n                    previous = current;\n                }\n\n                const width = current.split(first.del).length;\n\n                if (width !== first.row.length) {\n                    shape.errors['rowWidthMismatch'] = `row width mismatch`;\n                    return;\n                }\n                shape.preview.push(current.split(first.del));\n            }\n            count++;\n        });\n        return shape;\n    }\n\n\n    /**\n     * Initiates a multipart upload and returns an upload ID\n     * @returns {string} uploadID\n     * @private\n     */\n    #initMultipartUpload(\n        d: Dataset,\n        bucket: string,\n        key: string\n    ): Promise<string> {\n        return new Promise((resolve, reject) => {\n            try {\n                const conn = this.#s3Connector({\n                    credentials: credentials(\"default\"),\n                    region: \"us-east-2\",\n                });\n\n                if (!(conn instanceof S3Client))\n                    throw new Error(`Invalid operation for ${d.source}`);\n\n                const command = new CreateMultipartUploadCommand({\n                    Bucket: bucket,\n                    ContentEncoding: \"utf8\",\n                    ContentType: \"text/csv\",\n                    Key: key,\n                });\n\n                conn\n                    .send(command)\n                    .then((data) => {\n                        if (data.UploadId) {\n                            resolve(data.UploadId);\n                        }\n                        reject(new Error(\"noop\"))\n                    })\n                    .catch((error) => {\n                        reject(error);\n                    })\n                    .finally(() => {\n                        console.log(\"init multipart upload\");\n                    });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * Parse (s3://) style uri\n     */\n    #parseS3URI(\n        uri: string,\n        options: {\n            file: boolean;\n        }\n    ): {\n        data: {\n            bucket: string;\n            key: string;\n            file: string;\n        };\n        err: string;\n    } {\n        const opt = {\n            file: options && options.file ? options.file : false,\n        };\n\n        if (!uri.startsWith(\"s3://\") || uri.split(\":/\")[0] !== \"s3\") {\n            throw new Error(\"Invalid S3 URI\");\n        }\n\n        let err = \"\";\n\n        const result = {\n            bucket: \"\",\n            key: \"\",\n            file: \"\",\n        };\n\n        const src = uri.split(\":/\")[1];\n        const [bucket, ...keys] = src.split(\"/\").splice(1);\n\n        result.bucket = bucket;\n        result.key = keys.join(\"/\");\n\n        keys.forEach((k, i) => {\n            if (i === keys.length - 1) {\n                const last = k.split(\".\").length;\n                if (opt.file && last === 1) err = `uri should be a given, given: ${uri}`;\n\n                if (!opt.file && last === 1) return;\n\n                if (!opt.file && last > 1) {\n                    err = `Invalid S3 uri, ${uri} should not end with a file name`;\n                    return;\n                }\n\n                if (!opt.file && k.split(\".\")[1] !== \"\" && last > 1)\n                    err = `${uri} should not be a file endpoint: ${k}`;\n\n                if (last > 1 && k.split(\".\")[1] !== \"\") result.file = k;\n            }\n        });\n        return {\n            data: result,\n            err: err,\n        };\n    }\n}\n\n/**\n * Returns a new workflow\n * @param {string} name - Name of the workflow\n * @returns {Workflow} - New workflow\n */\n\nexport function createWorkflow(name: string): Workflow {\n    return new Workflow(name);\n}\n\n"],"names":[],"version":3,"file":"index.mjs.map"}