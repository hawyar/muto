var d=(a,t,e)=>new Promise((r,s)=>{var o=i=>{try{c(e.next(i))}catch(u){s(u)}},n=i=>{try{c(e.throw(i))}catch(u){s(u)}},c=i=>i.done?r(i.value):Promise.resolve(i.value).then(o,n);c((e=e.apply(a,t)).next())});import l from"fs";import{spawn as y}from"child_process";import C from"os";import v,{join as E}from"path";import{VFile as $}from"vfile";import{parse as P}from"pgsql-parser";import{createInterface as b}from"readline";import{CreateMultipartUploadCommand as x,PutObjectCommand as O,S3Client as W}from"@aws-sdk/client-s3";import{fromIni as k}from"@aws-sdk/credential-providers";var I=(n=>(n.COMMA=",",n.TAB="	",n.SPACE=" ",n.PIPE="|",n.SEMICOLON=";",n.COLON=":",n))(I||{});const w=E(process.cwd(),"node_modules",".bin","mlr@v6.0.0"),g=a=>k({profile:a,mfaCodeProvider:t=>d(void 0,null,function*(){return t})});let S;function m(a){return S||(console.log("setting up s3 client"),S=new W(a)),S}function N(a,t){const e={file:t&&t.file?t.file:!1};if(!a.startsWith("s3://")||a.split(":/")[0]!=="s3")throw new Error(`invalid-s3-uri: ${a}`);let r="";const s={bucket:"",key:"",file:""},o=a.split(":/")[1],[n,...c]=o.split("/").splice(1);return s.bucket=n,s.key=c.join("/"),c.forEach((i,u)=>{if(u===c.length-1){const f=i.split(".").length;if(e.file&&f===1&&(r=`uri should be a given, given: ${a}`),!e.file&&f===1)return;if(!e.file&&f>1){r=`Invalid S3 uri, ${a} should not end with a file name`;return}!e.file&&i.split(".")[1]!==""&&f>1&&(r=`${a} should not be a file endpoint: ${i}`),f>1&&i.split(".")[1]!==""&&(s.file=i)}}),{data:s,err:r}}var z=(t=>(t[t.LIMIT_OPTION_DEFAUL=0]="LIMIT_OPTION_DEFAUL",t))(z||{});class M{constructor(t,e){this.name=e&&e.name?e.name:v.basename(t),this.source=t,this.options=e,this.destination=e.destination,this.env="local",this.init=new Date,this.state="init",this.pcount=0,this.vfile=new $({path:this.source}),this.stmt={raw:"",selectStmt:{distinctClause:[],targetList:[],fromClause:[],whereClause:[],limitOption:0}}}toJson(){return d(this,null,function*(){const t=this.exec(w,["--icsv","--ojson","clean-whitespace",this.source]);if(!t.stdout)throw new Error(`failed to convert ${this.source} from CSV to JSON`);return t})}toCSV(){return d(this,null,function*(){const t=this.exec(w,["--icsv","--ocsv","cat",this.source]);if(!t.stdout)throw new Error(`failed to convert ${this.source} from JSON to CSV`);return t})}rowCount(){return d(this,null,function*(){const t=yield this.exec(w,["--ojson","count",this.source]),e=yield this.promisifyProcessResult(t);if(e.code!==0)throw new Error(`Error while counting rows: ${e.stderr}`);if(e.stderr)throw new Error(e.stderr);const r=JSON.parse(e.stdout);if(r.length===0)throw new Error("No rows found");return r[0].count})}getColumnHeader(){return d(this,null,function*(){const t=yield this.exec(w,["--icsv","--ojson","head","-n","1",this.source]),e=yield this.promisifyProcessResult(t);if(e.code!==0)return null;if(e.stderr)throw new Error(e.stderr);const r=JSON.parse(e.stdout);if(r.length===0)return null;const s=Object.keys(r[0]);return this.vfile.data.columns=s,s})}preview(t=20,e){return d(this,null,function*(){let r;const s=1024*1024*10,n=yield l.promises.stat(this.source);if(e&&e!==this.source&&l.createWriteStream(e)instanceof l.WriteStream||n.size>s){if(e===void 0)throw new Error("stream-destination-undefined");return r=l.createWriteStream(e),(yield this.exec(w,["--icsv","--ojson","head","-n",t.toString(),this.source])).stdout.pipe(r),console.warn(`\u{1F440} Preview saved to: ${e}`),e}const c=yield this.exec(w,["--icsv","--ojson","head","-n",t.toString(),this.source]),i=yield this.promisifyProcessResult(c);if(i.stderr)throw new Error(i.stderr);if(i.code!==0)throw new Error("Error while executing mlr command");return this.vfile.data.preview=JSON.parse(i.stdout),JSON.parse(i.stdout)})}detectShape(){return d(this,null,function*(){const t=this.source,e={type:"",size:0,columns:[],header:!1,encoding:"utf-8",bom:!1,spanMultipleLines:!1,quotes:!1,delimiter:",",errors:{},warnings:{},preview:[]};if(!l.existsSync(t))throw new Error(`path-doesnt-exists: ${t} ,provide a valid path to a CSV file`);if(e.size=l.statSync(t).size,e.size>1024*1024*1024)throw new Error(`file-size-exceeds-limit: ${t} is too large, please limit to under 1GB for now`);if(!l.existsSync(t))throw new Error(`${t} does not exist, provide a valid path to a CSV file`);if(C.platform()==="win32")throw new Error("scream");const r=this.exec("file",[t,"--mime-type"]),s=yield this.promisifyProcessResult(r);if(s.stderr)throw new Error(`failed-to-detect-mime-type: ${s.stderr}`);if(s.code!==0)throw new Error(`failed-to-detect-mime-type: ${s.stderr}`);e.type=s.stdout.split(":")[1].trim();const o=b({input:l.createReadStream(t),crlfDelay:1/0});let n=0;const c=20,i={row:[""],del:""};let u="";const f=[",",";","	","|",":"," ","|"];o.on("line",p=>{if(n===0&&(f.forEach(h=>{p.split(h).length>1&&(i.row=p.split(h),i.del=h)}),(i.del===""||i.row.length<=1)&&(e.errors.unrecognizedDelimiter=`${t} does not have a recognized delimiter`,e.header=!1),i.row.forEach(h=>{if(!isNaN(parseInt(h.substring(0,3)))){e.header=!1,e.warnings.noHeader="no header found",n++;return}}),e.header=!0,e.delimiter=i.del,e.columns=i.row),n>0&&n<c){const h=p.split('"').length-1;if(u&&h%2!==0&&(e.spanMultipleLines=!0),h%2!==0&&p.split('""').length-1!==1&&(u=p),p.split(i.del).length!==i.row.length){e.errors.rowWidthMismatch="row width mismatch";return}e.preview.push(p.split(i.del))}n++}),o.on("close",()=>{this.vfile.data.shape=e})})}determineLoader(){if(this.destination.startsWith("s3://")){this.vfile.data.loader=m({credentials:g("default"),region:"us-east-2"});return}if(this.source.startsWith("/")||this.source.startsWith("../")||this.source.startsWith("./")){this.vfile.data.loader=l.createReadStream(this.source);return}}determineConnector(){switch(this.env){case"local":if(!l.existsSync(this.source))throw new Error(`file: ${this.source} not found, please provide a valid file path`);this.vfile.data.connector=l.createReadStream(this.source);break;case"aws":this.vfile.data.connector=m({credentials:g("default"),region:"us-east-2"});break;default:throw new Error(`unsupported-source for: ${this.source}`)}}determineEnv(){if(this.vfile.data.source=this.source,this.source.startsWith("/")||this.source.startsWith("../")||this.source.startsWith("./")){this.env="local";return}if(this.source.startsWith("s3://")){this.env="aws";return}throw new Error(`invalid-source-type: ${this.source}`)}fileSize(){const t=1024*1024*50;if(!l.existsSync(this.source))throw new Error(`path-doesnt-exists: ${this.source} ,provide a valid path to a CSV file`);const e=l.statSync(this.source);if(e.size>t)throw new Error(`file-size-exceeds-limit: ${this.source} is too large, please limit to 50MB`);return e.size}uploadToS3(){return d(this,null,function*(){if(!this.source||!this.destination)throw new Error("source or destination not set. Both must be defined to upload to S3");const t=l.createReadStream(this.source);if(!t.readable)throw new Error("failed-to-read-source: Make sure the provided file is readable");const e=this.fileSize();e>100*1024*1024&&console.warn(`file size ${e} is larger`);const{data:r,err:s}=N(this.destination,{file:!0});if(s.toString().startsWith("invalid-s3-uri"))throw new Error(`failed-to-parse-s3-uri: ${s}`);r.file||(r.file=v.basename(this.source),console.warn("Destination filename not provided. Using source source basename"+r.file)),console.log(`uploading ${this.source} to ${this.destination}`);const n=yield m({region:"us-east-2"}).send(new O({Bucket:r.bucket,Key:r.key+r.file,Body:t})).catch(c=>{throw new Error(`failed-upload-s3: Error while uploading to S3: ${c}`)}).finally(()=>{t.close()});if(n.$metadata.httpStatusCode!==200)throw new Error(`failed-upload-s3: Error while uploading to S3: ${n.$metadata.httpStatusCode}`);if(!n.$metadata.requestId)throw new Error(`failed-upload-s3: Error while uploading to S3: ${n.$metadata.httpStatusCode}`);return n.$metadata.requestId})}initMultipartUpload(t,e){return d(this,null,function*(){const r=m({credentials:g("default"),region:"us-east-2"}),s=new x({Bucket:t,ContentEncoding:"utf8",ContentType:"text/csv",Key:e}),o=yield r.send(s);if(o.$metadata.httpStatusCode!==200)throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${o.UploadId} with status code ${o.$metadata.httpStatusCode}`);if(!o.UploadId)throw new Error(`failed-multipart-upload: Error while creating multipart upload: ${o.UploadId}`);return o.UploadId})}exec(t,e){if(console.log(`exec: ${t} ${e.join(" ")}`),this.pcount>5)throw new Error(`too-many-processes: ${this.pcount}`);return this.pcount++,y(t,e,{})}promisifyProcessResult(t){const e={stdout:"",stderr:"",code:0};return new Promise((r,s)=>{t.stdout.on("data",o=>{e.stdout+=o}),t.stderr.on("data",o=>{e.stderr+=o}),t.on("close",o=>{e.code=o===0?0:1,r(e)}),t.on("error",o=>{s(o)})})}parseSql(t){const e=P(t);l.writeFileSync("tmpp.json",JSON.stringify(e,null,2))}}function K(a,t){return d(this,null,function*(){return new Promise((e,r)=>{a||r(new Error("failed-to-create-dataset: source is required")),(!t||!t.destination)&&r(new Error("failed-to-create-dataset: destination is required")),a.endsWith(".csv")||r(new Error(`failed to create dataset: ${a}, source must be a csv file`));const s=new M(a,t);Promise.all([s.determineEnv(),s.detectShape(),s.determineConnector(),s.determineLoader()]).then(()=>{console.log(`created catalog for ${a}`),e(s)}).catch(o=>r(o))})})}class L{constructor(t){this.name=t,this.catalogs=new Map,this.createdAt=new Date,this.env="local",this.stmt=""}list(){return Array.from(this.catalogs.values())}remove(t){this.catalogs.delete(t.source)}get(t){return this.catalogs.get(t)||null}add(t){if(Array.isArray(t)){if(t.length===1&&t[0].source){const r=t[0];if(this.catalogs.has(r.source))throw new Error(`duplicate-dataset: ${r.source}`);return this.catalogs.set(r.source,r),r.source}const e=new Set;return t.forEach(r=>{if(this.catalogs.has(r.source))throw new Error(`duplicate-dataset: ${r.source}`);console.log(`added ${r.source} to the workflow`),this.catalogs.set(r.source,r),e.add(r.source)}),Array.from(e)}if(this.catalogs.has(t.source))throw new Error(`duplicate-dataset: ${t.source}`);return this.catalogs.set(t.source,t),console.log(`added ${t.source} to the workflow`),t.source}}function G(a){return new L(a)}export{K as createCatalog,G as createWorkflow};
